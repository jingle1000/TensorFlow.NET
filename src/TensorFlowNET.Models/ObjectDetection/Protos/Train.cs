// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: object_detection/protos/train.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Models.ObjectDetection.Protos {

  /// <summary>Holder for reflection information generated from object_detection/protos/train.proto</summary>
  public static partial class TrainReflection {

    #region Descriptor
    /// <summary>File descriptor for object_detection/protos/train.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrainReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNvYmplY3RfZGV0ZWN0aW9uL3Byb3Rvcy90cmFpbi5wcm90bxIXb2JqZWN0",
            "X2RldGVjdGlvbi5wcm90b3MaJ29iamVjdF9kZXRlY3Rpb24vcHJvdG9zL29w",
            "dGltaXplci5wcm90bxoqb2JqZWN0X2RldGVjdGlvbi9wcm90b3MvcHJlcHJv",
            "Y2Vzc29yLnByb3RvIpoHCgtUcmFpbkNvbmZpZxISCgpiYXRjaF9zaXplGAEg",
            "ASgNEk0KGWRhdGFfYXVnbWVudGF0aW9uX29wdGlvbnMYAiADKAsyKi5vYmpl",
            "Y3RfZGV0ZWN0aW9uLnByb3Rvcy5QcmVwcm9jZXNzaW5nU3RlcBIVCg1zeW5j",
            "X3JlcGxpY2FzGAMgASgIEiUKHWtlZXBfY2hlY2twb2ludF9ldmVyeV9uX2hv",
            "dXJzGAQgASgCEjUKCW9wdGltaXplchgFIAEoCzIiLm9iamVjdF9kZXRlY3Rp",
            "b24ucHJvdG9zLk9wdGltaXplchIhChlncmFkaWVudF9jbGlwcGluZ19ieV9u",
            "b3JtGAYgASgCEhwKFGZpbmVfdHVuZV9jaGVja3BvaW50GAcgASgJEiEKGWZp",
            "bmVfdHVuZV9jaGVja3BvaW50X3R5cGUYFiABKAkSIQoZZnJvbV9kZXRlY3Rp",
            "b25fY2hlY2twb2ludBgIIAEoCBIqCiJsb2FkX2FsbF9kZXRlY3Rpb25fY2hl",
            "Y2twb2ludF92YXJzGBMgASgIEhEKCW51bV9zdGVwcxgJIAEoDRIbChNzdGFy",
            "dHVwX2RlbGF5X3N0ZXBzGAogASgCEhwKFGJpYXNfZ3JhZF9tdWx0aXBsaWVy",
            "GAsgASgCEiIKGnVwZGF0ZV90cmFpbmFibGVfdmFyaWFibGVzGBkgAygJEhgK",
            "EGZyZWV6ZV92YXJpYWJsZXMYDCADKAkSHQoVcmVwbGljYXNfdG9fYWdncmVn",
            "YXRlGA0gASgFEhwKFGJhdGNoX3F1ZXVlX2NhcGFjaXR5GA4gASgFEh8KF251",
            "bV9iYXRjaF9xdWV1ZV90aHJlYWRzGA8gASgFEh8KF3ByZWZldGNoX3F1ZXVl",
            "X2NhcGFjaXR5GBAgASgFEiIKGm1lcmdlX211bHRpcGxlX2xhYmVsX2JveGVz",
            "GBEgASgIEh0KFXVzZV9tdWx0aWNsYXNzX3Njb3JlcxgYIAEoCBIfChdhZGRf",
            "cmVndWxhcml6YXRpb25fbG9zcxgSIAEoCBIbChNtYXhfbnVtYmVyX29mX2Jv",
            "eGVzGBQgASgFEiEKGXVucGFkX2dyb3VuZHRydXRoX3RlbnNvcnMYFSABKAgS",
            "HgoWcmV0YWluX29yaWdpbmFsX2ltYWdlcxgXIAEoCBIUCgx1c2VfYmZsb2F0",
            "MTYYGiABKAgSGwoTc3VtbWFyaXplX2dyYWRpZW50cxgbIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.Models.ObjectDetection.Protos.OptimizerReflection.Descriptor, global::Tensorflow.Models.ObjectDetection.Protos.PreprocessorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.TrainConfig), global::Tensorflow.Models.ObjectDetection.Protos.TrainConfig.Parser, new[]{ "BatchSize", "DataAugmentationOptions", "SyncReplicas", "KeepCheckpointEveryNHours", "Optimizer", "GradientClippingByNorm", "FineTuneCheckpoint", "FineTuneCheckpointType", "FromDetectionCheckpoint", "LoadAllDetectionCheckpointVars", "NumSteps", "StartupDelaySteps", "BiasGradMultiplier", "UpdateTrainableVariables", "FreezeVariables", "ReplicasToAggregate", "BatchQueueCapacity", "NumBatchQueueThreads", "PrefetchQueueCapacity", "MergeMultipleLabelBoxes", "UseMulticlassScores", "AddRegularizationLoss", "MaxNumberOfBoxes", "UnpadGroundtruthTensors", "RetainOriginalImages", "UseBfloat16", "SummarizeGradients" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Message for configuring DetectionModel training jobs (train.py).
  /// Next id: 28
  /// </summary>
  public sealed partial class TrainConfig : pb::IMessage<TrainConfig> {
    private static readonly pb::MessageParser<TrainConfig> _parser = new pb::MessageParser<TrainConfig>(() => new TrainConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.TrainReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainConfig(TrainConfig other) : this() {
      batchSize_ = other.batchSize_;
      dataAugmentationOptions_ = other.dataAugmentationOptions_.Clone();
      syncReplicas_ = other.syncReplicas_;
      keepCheckpointEveryNHours_ = other.keepCheckpointEveryNHours_;
      optimizer_ = other.optimizer_ != null ? other.optimizer_.Clone() : null;
      gradientClippingByNorm_ = other.gradientClippingByNorm_;
      fineTuneCheckpoint_ = other.fineTuneCheckpoint_;
      fineTuneCheckpointType_ = other.fineTuneCheckpointType_;
      fromDetectionCheckpoint_ = other.fromDetectionCheckpoint_;
      loadAllDetectionCheckpointVars_ = other.loadAllDetectionCheckpointVars_;
      numSteps_ = other.numSteps_;
      startupDelaySteps_ = other.startupDelaySteps_;
      biasGradMultiplier_ = other.biasGradMultiplier_;
      updateTrainableVariables_ = other.updateTrainableVariables_.Clone();
      freezeVariables_ = other.freezeVariables_.Clone();
      replicasToAggregate_ = other.replicasToAggregate_;
      batchQueueCapacity_ = other.batchQueueCapacity_;
      numBatchQueueThreads_ = other.numBatchQueueThreads_;
      prefetchQueueCapacity_ = other.prefetchQueueCapacity_;
      mergeMultipleLabelBoxes_ = other.mergeMultipleLabelBoxes_;
      useMulticlassScores_ = other.useMulticlassScores_;
      addRegularizationLoss_ = other.addRegularizationLoss_;
      maxNumberOfBoxes_ = other.maxNumberOfBoxes_;
      unpadGroundtruthTensors_ = other.unpadGroundtruthTensors_;
      retainOriginalImages_ = other.retainOriginalImages_;
      useBfloat16_ = other.useBfloat16_;
      summarizeGradients_ = other.summarizeGradients_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainConfig Clone() {
      return new TrainConfig(this);
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 1;
    private uint batchSize_;
    /// <summary>
    /// Effective batch size to use for training.
    /// For TPU (or sync SGD jobs), the batch size per core (or GPU) is going to be
    /// `batch_size` / number of cores (or `batch_size` / number of GPUs).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "data_augmentation_options" field.</summary>
    public const int DataAugmentationOptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.Models.ObjectDetection.Protos.PreprocessingStep> _repeated_dataAugmentationOptions_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.Models.ObjectDetection.Protos.PreprocessingStep.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Models.ObjectDetection.Protos.PreprocessingStep> dataAugmentationOptions_ = new pbc::RepeatedField<global::Tensorflow.Models.ObjectDetection.Protos.PreprocessingStep>();
    /// <summary>
    /// Data augmentation options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Models.ObjectDetection.Protos.PreprocessingStep> DataAugmentationOptions {
      get { return dataAugmentationOptions_; }
    }

    /// <summary>Field number for the "sync_replicas" field.</summary>
    public const int SyncReplicasFieldNumber = 3;
    private bool syncReplicas_;
    /// <summary>
    /// Whether to synchronize replicas during training.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncReplicas {
      get { return syncReplicas_; }
      set {
        syncReplicas_ = value;
      }
    }

    /// <summary>Field number for the "keep_checkpoint_every_n_hours" field.</summary>
    public const int KeepCheckpointEveryNHoursFieldNumber = 4;
    private float keepCheckpointEveryNHours_;
    /// <summary>
    /// How frequently to keep checkpoints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KeepCheckpointEveryNHours {
      get { return keepCheckpointEveryNHours_; }
      set {
        keepCheckpointEveryNHours_ = value;
      }
    }

    /// <summary>Field number for the "optimizer" field.</summary>
    public const int OptimizerFieldNumber = 5;
    private global::Tensorflow.Models.ObjectDetection.Protos.Optimizer optimizer_;
    /// <summary>
    /// Optimizer used to train the DetectionModel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.Optimizer Optimizer {
      get { return optimizer_; }
      set {
        optimizer_ = value;
      }
    }

    /// <summary>Field number for the "gradient_clipping_by_norm" field.</summary>
    public const int GradientClippingByNormFieldNumber = 6;
    private float gradientClippingByNorm_;
    /// <summary>
    /// If greater than 0, clips gradients by this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GradientClippingByNorm {
      get { return gradientClippingByNorm_; }
      set {
        gradientClippingByNorm_ = value;
      }
    }

    /// <summary>Field number for the "fine_tune_checkpoint" field.</summary>
    public const int FineTuneCheckpointFieldNumber = 7;
    private string fineTuneCheckpoint_ = "";
    /// <summary>
    /// Checkpoint to restore variables from. Typically used to load feature
    /// extractor variables trained outside of object detection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FineTuneCheckpoint {
      get { return fineTuneCheckpoint_; }
      set {
        fineTuneCheckpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fine_tune_checkpoint_type" field.</summary>
    public const int FineTuneCheckpointTypeFieldNumber = 22;
    private string fineTuneCheckpointType_ = "";
    /// <summary>
    /// Type of checkpoint to restore variables from, e.g. 'classification' or
    /// 'detection'. Provides extensibility to from_detection_checkpoint.
    /// Typically used to load feature extractor variables from trained models.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FineTuneCheckpointType {
      get { return fineTuneCheckpointType_; }
      set {
        fineTuneCheckpointType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_detection_checkpoint" field.</summary>
    public const int FromDetectionCheckpointFieldNumber = 8;
    private bool fromDetectionCheckpoint_;
    /// <summary>
    /// [Deprecated]: use fine_tune_checkpoint_type instead.
    /// Specifies if the finetune checkpoint is from an object detection model.
    /// If from an object detection model, the model being trained should have
    /// the same parameters with the exception of the num_classes parameter.
    /// If false, it assumes the checkpoint was a object classification model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FromDetectionCheckpoint {
      get { return fromDetectionCheckpoint_; }
      set {
        fromDetectionCheckpoint_ = value;
      }
    }

    /// <summary>Field number for the "load_all_detection_checkpoint_vars" field.</summary>
    public const int LoadAllDetectionCheckpointVarsFieldNumber = 19;
    private bool loadAllDetectionCheckpointVars_;
    /// <summary>
    /// Whether to load all checkpoint vars that match model variable names and
    /// sizes. This option is only available if `from_detection_checkpoint` is
    /// True.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadAllDetectionCheckpointVars {
      get { return loadAllDetectionCheckpointVars_; }
      set {
        loadAllDetectionCheckpointVars_ = value;
      }
    }

    /// <summary>Field number for the "num_steps" field.</summary>
    public const int NumStepsFieldNumber = 9;
    private uint numSteps_;
    /// <summary>
    /// Number of steps to train the DetectionModel for. If 0, will train the model
    /// indefinitely.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSteps {
      get { return numSteps_; }
      set {
        numSteps_ = value;
      }
    }

    /// <summary>Field number for the "startup_delay_steps" field.</summary>
    public const int StartupDelayStepsFieldNumber = 10;
    private float startupDelaySteps_;
    /// <summary>
    /// Number of training steps between replica startup.
    /// This flag must be set to 0 if sync_replicas is set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartupDelaySteps {
      get { return startupDelaySteps_; }
      set {
        startupDelaySteps_ = value;
      }
    }

    /// <summary>Field number for the "bias_grad_multiplier" field.</summary>
    public const int BiasGradMultiplierFieldNumber = 11;
    private float biasGradMultiplier_;
    /// <summary>
    /// If greater than 0, multiplies the gradient of bias variables by this
    /// amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BiasGradMultiplier {
      get { return biasGradMultiplier_; }
      set {
        biasGradMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "update_trainable_variables" field.</summary>
    public const int UpdateTrainableVariablesFieldNumber = 25;
    private static readonly pb::FieldCodec<string> _repeated_updateTrainableVariables_codec
        = pb::FieldCodec.ForString(202);
    private readonly pbc::RepeatedField<string> updateTrainableVariables_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Variables that should be updated during training. Note that variables which
    /// also match the patterns in freeze_variables will be excluded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UpdateTrainableVariables {
      get { return updateTrainableVariables_; }
    }

    /// <summary>Field number for the "freeze_variables" field.</summary>
    public const int FreezeVariablesFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_freezeVariables_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> freezeVariables_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Variables that should not be updated during training. If
    /// update_trainable_variables is not empty, only eliminates the included
    /// variables according to freeze_variables patterns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FreezeVariables {
      get { return freezeVariables_; }
    }

    /// <summary>Field number for the "replicas_to_aggregate" field.</summary>
    public const int ReplicasToAggregateFieldNumber = 13;
    private int replicasToAggregate_;
    /// <summary>
    /// Number of replicas to aggregate before making parameter updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplicasToAggregate {
      get { return replicasToAggregate_; }
      set {
        replicasToAggregate_ = value;
      }
    }

    /// <summary>Field number for the "batch_queue_capacity" field.</summary>
    public const int BatchQueueCapacityFieldNumber = 14;
    private int batchQueueCapacity_;
    /// <summary>
    /// Maximum number of elements to store within a queue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatchQueueCapacity {
      get { return batchQueueCapacity_; }
      set {
        batchQueueCapacity_ = value;
      }
    }

    /// <summary>Field number for the "num_batch_queue_threads" field.</summary>
    public const int NumBatchQueueThreadsFieldNumber = 15;
    private int numBatchQueueThreads_;
    /// <summary>
    /// Number of threads to use for batching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumBatchQueueThreads {
      get { return numBatchQueueThreads_; }
      set {
        numBatchQueueThreads_ = value;
      }
    }

    /// <summary>Field number for the "prefetch_queue_capacity" field.</summary>
    public const int PrefetchQueueCapacityFieldNumber = 16;
    private int prefetchQueueCapacity_;
    /// <summary>
    /// Maximum capacity of the queue used to prefetch assembled batches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrefetchQueueCapacity {
      get { return prefetchQueueCapacity_; }
      set {
        prefetchQueueCapacity_ = value;
      }
    }

    /// <summary>Field number for the "merge_multiple_label_boxes" field.</summary>
    public const int MergeMultipleLabelBoxesFieldNumber = 17;
    private bool mergeMultipleLabelBoxes_;
    /// <summary>
    /// If true, boxes with the same coordinates will be merged together.
    /// This is useful when each box can have multiple labels.
    /// Note that only Sigmoid classification losses should be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MergeMultipleLabelBoxes {
      get { return mergeMultipleLabelBoxes_; }
      set {
        mergeMultipleLabelBoxes_ = value;
      }
    }

    /// <summary>Field number for the "use_multiclass_scores" field.</summary>
    public const int UseMulticlassScoresFieldNumber = 24;
    private bool useMulticlassScores_;
    /// <summary>
    /// If true, will use multiclass scores from object annotations as ground
    /// truth. Currently only compatible with annotated image inputs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMulticlassScores {
      get { return useMulticlassScores_; }
      set {
        useMulticlassScores_ = value;
      }
    }

    /// <summary>Field number for the "add_regularization_loss" field.</summary>
    public const int AddRegularizationLossFieldNumber = 18;
    private bool addRegularizationLoss_;
    /// <summary>
    /// Whether to add regularization loss to `total_loss`. This is true by
    /// default and adds all regularization losses defined in the model to
    /// `total_loss`.
    /// Setting this option to false is very useful while debugging the model and
    /// losses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AddRegularizationLoss {
      get { return addRegularizationLoss_; }
      set {
        addRegularizationLoss_ = value;
      }
    }

    /// <summary>Field number for the "max_number_of_boxes" field.</summary>
    public const int MaxNumberOfBoxesFieldNumber = 20;
    private int maxNumberOfBoxes_;
    /// <summary>
    /// Maximum number of boxes used during training.
    /// Set this to at least the maximum amount of boxes in the input data.
    /// Otherwise, it may cause "Data loss: Attempted to pad to a smaller size
    /// than the input element" errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNumberOfBoxes {
      get { return maxNumberOfBoxes_; }
      set {
        maxNumberOfBoxes_ = value;
      }
    }

    /// <summary>Field number for the "unpad_groundtruth_tensors" field.</summary>
    public const int UnpadGroundtruthTensorsFieldNumber = 21;
    private bool unpadGroundtruthTensors_;
    /// <summary>
    /// Whether to remove padding along `num_boxes` dimension of the groundtruth
    /// tensors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnpadGroundtruthTensors {
      get { return unpadGroundtruthTensors_; }
      set {
        unpadGroundtruthTensors_ = value;
      }
    }

    /// <summary>Field number for the "retain_original_images" field.</summary>
    public const int RetainOriginalImagesFieldNumber = 23;
    private bool retainOriginalImages_;
    /// <summary>
    /// Whether to retain original images (i.e. not pre-processed) in the tensor
    /// dictionary, so that they can be displayed in Tensorboard. Note that this
    /// will lead to a larger memory footprint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RetainOriginalImages {
      get { return retainOriginalImages_; }
      set {
        retainOriginalImages_ = value;
      }
    }

    /// <summary>Field number for the "use_bfloat16" field.</summary>
    public const int UseBfloat16FieldNumber = 26;
    private bool useBfloat16_;
    /// <summary>
    /// Whether to use bfloat16 for training. This is currently only supported for
    /// TPUs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBfloat16 {
      get { return useBfloat16_; }
      set {
        useBfloat16_ = value;
      }
    }

    /// <summary>Field number for the "summarize_gradients" field.</summary>
    public const int SummarizeGradientsFieldNumber = 27;
    private bool summarizeGradients_;
    /// <summary>
    /// Whether to summarize gradients.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SummarizeGradients {
      get { return summarizeGradients_; }
      set {
        summarizeGradients_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchSize != other.BatchSize) return false;
      if(!dataAugmentationOptions_.Equals(other.dataAugmentationOptions_)) return false;
      if (SyncReplicas != other.SyncReplicas) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KeepCheckpointEveryNHours, other.KeepCheckpointEveryNHours)) return false;
      if (!object.Equals(Optimizer, other.Optimizer)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GradientClippingByNorm, other.GradientClippingByNorm)) return false;
      if (FineTuneCheckpoint != other.FineTuneCheckpoint) return false;
      if (FineTuneCheckpointType != other.FineTuneCheckpointType) return false;
      if (FromDetectionCheckpoint != other.FromDetectionCheckpoint) return false;
      if (LoadAllDetectionCheckpointVars != other.LoadAllDetectionCheckpointVars) return false;
      if (NumSteps != other.NumSteps) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartupDelaySteps, other.StartupDelaySteps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BiasGradMultiplier, other.BiasGradMultiplier)) return false;
      if(!updateTrainableVariables_.Equals(other.updateTrainableVariables_)) return false;
      if(!freezeVariables_.Equals(other.freezeVariables_)) return false;
      if (ReplicasToAggregate != other.ReplicasToAggregate) return false;
      if (BatchQueueCapacity != other.BatchQueueCapacity) return false;
      if (NumBatchQueueThreads != other.NumBatchQueueThreads) return false;
      if (PrefetchQueueCapacity != other.PrefetchQueueCapacity) return false;
      if (MergeMultipleLabelBoxes != other.MergeMultipleLabelBoxes) return false;
      if (UseMulticlassScores != other.UseMulticlassScores) return false;
      if (AddRegularizationLoss != other.AddRegularizationLoss) return false;
      if (MaxNumberOfBoxes != other.MaxNumberOfBoxes) return false;
      if (UnpadGroundtruthTensors != other.UnpadGroundtruthTensors) return false;
      if (RetainOriginalImages != other.RetainOriginalImages) return false;
      if (UseBfloat16 != other.UseBfloat16) return false;
      if (SummarizeGradients != other.SummarizeGradients) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      hash ^= dataAugmentationOptions_.GetHashCode();
      if (SyncReplicas != false) hash ^= SyncReplicas.GetHashCode();
      if (KeepCheckpointEveryNHours != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KeepCheckpointEveryNHours);
      if (optimizer_ != null) hash ^= Optimizer.GetHashCode();
      if (GradientClippingByNorm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GradientClippingByNorm);
      if (FineTuneCheckpoint.Length != 0) hash ^= FineTuneCheckpoint.GetHashCode();
      if (FineTuneCheckpointType.Length != 0) hash ^= FineTuneCheckpointType.GetHashCode();
      if (FromDetectionCheckpoint != false) hash ^= FromDetectionCheckpoint.GetHashCode();
      if (LoadAllDetectionCheckpointVars != false) hash ^= LoadAllDetectionCheckpointVars.GetHashCode();
      if (NumSteps != 0) hash ^= NumSteps.GetHashCode();
      if (StartupDelaySteps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartupDelaySteps);
      if (BiasGradMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BiasGradMultiplier);
      hash ^= updateTrainableVariables_.GetHashCode();
      hash ^= freezeVariables_.GetHashCode();
      if (ReplicasToAggregate != 0) hash ^= ReplicasToAggregate.GetHashCode();
      if (BatchQueueCapacity != 0) hash ^= BatchQueueCapacity.GetHashCode();
      if (NumBatchQueueThreads != 0) hash ^= NumBatchQueueThreads.GetHashCode();
      if (PrefetchQueueCapacity != 0) hash ^= PrefetchQueueCapacity.GetHashCode();
      if (MergeMultipleLabelBoxes != false) hash ^= MergeMultipleLabelBoxes.GetHashCode();
      if (UseMulticlassScores != false) hash ^= UseMulticlassScores.GetHashCode();
      if (AddRegularizationLoss != false) hash ^= AddRegularizationLoss.GetHashCode();
      if (MaxNumberOfBoxes != 0) hash ^= MaxNumberOfBoxes.GetHashCode();
      if (UnpadGroundtruthTensors != false) hash ^= UnpadGroundtruthTensors.GetHashCode();
      if (RetainOriginalImages != false) hash ^= RetainOriginalImages.GetHashCode();
      if (UseBfloat16 != false) hash ^= UseBfloat16.GetHashCode();
      if (SummarizeGradients != false) hash ^= SummarizeGradients.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BatchSize);
      }
      dataAugmentationOptions_.WriteTo(output, _repeated_dataAugmentationOptions_codec);
      if (SyncReplicas != false) {
        output.WriteRawTag(24);
        output.WriteBool(SyncReplicas);
      }
      if (KeepCheckpointEveryNHours != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(KeepCheckpointEveryNHours);
      }
      if (optimizer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Optimizer);
      }
      if (GradientClippingByNorm != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(GradientClippingByNorm);
      }
      if (FineTuneCheckpoint.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FineTuneCheckpoint);
      }
      if (FromDetectionCheckpoint != false) {
        output.WriteRawTag(64);
        output.WriteBool(FromDetectionCheckpoint);
      }
      if (NumSteps != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumSteps);
      }
      if (StartupDelaySteps != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(StartupDelaySteps);
      }
      if (BiasGradMultiplier != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(BiasGradMultiplier);
      }
      freezeVariables_.WriteTo(output, _repeated_freezeVariables_codec);
      if (ReplicasToAggregate != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ReplicasToAggregate);
      }
      if (BatchQueueCapacity != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BatchQueueCapacity);
      }
      if (NumBatchQueueThreads != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(NumBatchQueueThreads);
      }
      if (PrefetchQueueCapacity != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PrefetchQueueCapacity);
      }
      if (MergeMultipleLabelBoxes != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MergeMultipleLabelBoxes);
      }
      if (AddRegularizationLoss != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(AddRegularizationLoss);
      }
      if (LoadAllDetectionCheckpointVars != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(LoadAllDetectionCheckpointVars);
      }
      if (MaxNumberOfBoxes != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MaxNumberOfBoxes);
      }
      if (UnpadGroundtruthTensors != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(UnpadGroundtruthTensors);
      }
      if (FineTuneCheckpointType.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(FineTuneCheckpointType);
      }
      if (RetainOriginalImages != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(RetainOriginalImages);
      }
      if (UseMulticlassScores != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(UseMulticlassScores);
      }
      updateTrainableVariables_.WriteTo(output, _repeated_updateTrainableVariables_codec);
      if (UseBfloat16 != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(UseBfloat16);
      }
      if (SummarizeGradients != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(SummarizeGradients);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      size += dataAugmentationOptions_.CalculateSize(_repeated_dataAugmentationOptions_codec);
      if (SyncReplicas != false) {
        size += 1 + 1;
      }
      if (KeepCheckpointEveryNHours != 0F) {
        size += 1 + 4;
      }
      if (optimizer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Optimizer);
      }
      if (GradientClippingByNorm != 0F) {
        size += 1 + 4;
      }
      if (FineTuneCheckpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FineTuneCheckpoint);
      }
      if (FineTuneCheckpointType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FineTuneCheckpointType);
      }
      if (FromDetectionCheckpoint != false) {
        size += 1 + 1;
      }
      if (LoadAllDetectionCheckpointVars != false) {
        size += 2 + 1;
      }
      if (NumSteps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumSteps);
      }
      if (StartupDelaySteps != 0F) {
        size += 1 + 4;
      }
      if (BiasGradMultiplier != 0F) {
        size += 1 + 4;
      }
      size += updateTrainableVariables_.CalculateSize(_repeated_updateTrainableVariables_codec);
      size += freezeVariables_.CalculateSize(_repeated_freezeVariables_codec);
      if (ReplicasToAggregate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplicasToAggregate);
      }
      if (BatchQueueCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchQueueCapacity);
      }
      if (NumBatchQueueThreads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBatchQueueThreads);
      }
      if (PrefetchQueueCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrefetchQueueCapacity);
      }
      if (MergeMultipleLabelBoxes != false) {
        size += 2 + 1;
      }
      if (UseMulticlassScores != false) {
        size += 2 + 1;
      }
      if (AddRegularizationLoss != false) {
        size += 2 + 1;
      }
      if (MaxNumberOfBoxes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxNumberOfBoxes);
      }
      if (UnpadGroundtruthTensors != false) {
        size += 2 + 1;
      }
      if (RetainOriginalImages != false) {
        size += 2 + 1;
      }
      if (UseBfloat16 != false) {
        size += 2 + 1;
      }
      if (SummarizeGradients != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainConfig other) {
      if (other == null) {
        return;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      dataAugmentationOptions_.Add(other.dataAugmentationOptions_);
      if (other.SyncReplicas != false) {
        SyncReplicas = other.SyncReplicas;
      }
      if (other.KeepCheckpointEveryNHours != 0F) {
        KeepCheckpointEveryNHours = other.KeepCheckpointEveryNHours;
      }
      if (other.optimizer_ != null) {
        if (optimizer_ == null) {
          optimizer_ = new global::Tensorflow.Models.ObjectDetection.Protos.Optimizer();
        }
        Optimizer.MergeFrom(other.Optimizer);
      }
      if (other.GradientClippingByNorm != 0F) {
        GradientClippingByNorm = other.GradientClippingByNorm;
      }
      if (other.FineTuneCheckpoint.Length != 0) {
        FineTuneCheckpoint = other.FineTuneCheckpoint;
      }
      if (other.FineTuneCheckpointType.Length != 0) {
        FineTuneCheckpointType = other.FineTuneCheckpointType;
      }
      if (other.FromDetectionCheckpoint != false) {
        FromDetectionCheckpoint = other.FromDetectionCheckpoint;
      }
      if (other.LoadAllDetectionCheckpointVars != false) {
        LoadAllDetectionCheckpointVars = other.LoadAllDetectionCheckpointVars;
      }
      if (other.NumSteps != 0) {
        NumSteps = other.NumSteps;
      }
      if (other.StartupDelaySteps != 0F) {
        StartupDelaySteps = other.StartupDelaySteps;
      }
      if (other.BiasGradMultiplier != 0F) {
        BiasGradMultiplier = other.BiasGradMultiplier;
      }
      updateTrainableVariables_.Add(other.updateTrainableVariables_);
      freezeVariables_.Add(other.freezeVariables_);
      if (other.ReplicasToAggregate != 0) {
        ReplicasToAggregate = other.ReplicasToAggregate;
      }
      if (other.BatchQueueCapacity != 0) {
        BatchQueueCapacity = other.BatchQueueCapacity;
      }
      if (other.NumBatchQueueThreads != 0) {
        NumBatchQueueThreads = other.NumBatchQueueThreads;
      }
      if (other.PrefetchQueueCapacity != 0) {
        PrefetchQueueCapacity = other.PrefetchQueueCapacity;
      }
      if (other.MergeMultipleLabelBoxes != false) {
        MergeMultipleLabelBoxes = other.MergeMultipleLabelBoxes;
      }
      if (other.UseMulticlassScores != false) {
        UseMulticlassScores = other.UseMulticlassScores;
      }
      if (other.AddRegularizationLoss != false) {
        AddRegularizationLoss = other.AddRegularizationLoss;
      }
      if (other.MaxNumberOfBoxes != 0) {
        MaxNumberOfBoxes = other.MaxNumberOfBoxes;
      }
      if (other.UnpadGroundtruthTensors != false) {
        UnpadGroundtruthTensors = other.UnpadGroundtruthTensors;
      }
      if (other.RetainOriginalImages != false) {
        RetainOriginalImages = other.RetainOriginalImages;
      }
      if (other.UseBfloat16 != false) {
        UseBfloat16 = other.UseBfloat16;
      }
      if (other.SummarizeGradients != false) {
        SummarizeGradients = other.SummarizeGradients;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 18: {
            dataAugmentationOptions_.AddEntriesFrom(input, _repeated_dataAugmentationOptions_codec);
            break;
          }
          case 24: {
            SyncReplicas = input.ReadBool();
            break;
          }
          case 37: {
            KeepCheckpointEveryNHours = input.ReadFloat();
            break;
          }
          case 42: {
            if (optimizer_ == null) {
              optimizer_ = new global::Tensorflow.Models.ObjectDetection.Protos.Optimizer();
            }
            input.ReadMessage(optimizer_);
            break;
          }
          case 53: {
            GradientClippingByNorm = input.ReadFloat();
            break;
          }
          case 58: {
            FineTuneCheckpoint = input.ReadString();
            break;
          }
          case 64: {
            FromDetectionCheckpoint = input.ReadBool();
            break;
          }
          case 72: {
            NumSteps = input.ReadUInt32();
            break;
          }
          case 85: {
            StartupDelaySteps = input.ReadFloat();
            break;
          }
          case 93: {
            BiasGradMultiplier = input.ReadFloat();
            break;
          }
          case 98: {
            freezeVariables_.AddEntriesFrom(input, _repeated_freezeVariables_codec);
            break;
          }
          case 104: {
            ReplicasToAggregate = input.ReadInt32();
            break;
          }
          case 112: {
            BatchQueueCapacity = input.ReadInt32();
            break;
          }
          case 120: {
            NumBatchQueueThreads = input.ReadInt32();
            break;
          }
          case 128: {
            PrefetchQueueCapacity = input.ReadInt32();
            break;
          }
          case 136: {
            MergeMultipleLabelBoxes = input.ReadBool();
            break;
          }
          case 144: {
            AddRegularizationLoss = input.ReadBool();
            break;
          }
          case 152: {
            LoadAllDetectionCheckpointVars = input.ReadBool();
            break;
          }
          case 160: {
            MaxNumberOfBoxes = input.ReadInt32();
            break;
          }
          case 168: {
            UnpadGroundtruthTensors = input.ReadBool();
            break;
          }
          case 178: {
            FineTuneCheckpointType = input.ReadString();
            break;
          }
          case 184: {
            RetainOriginalImages = input.ReadBool();
            break;
          }
          case 192: {
            UseMulticlassScores = input.ReadBool();
            break;
          }
          case 202: {
            updateTrainableVariables_.AddEntriesFrom(input, _repeated_updateTrainableVariables_codec);
            break;
          }
          case 208: {
            UseBfloat16 = input.ReadBool();
            break;
          }
          case 216: {
            SummarizeGradients = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
