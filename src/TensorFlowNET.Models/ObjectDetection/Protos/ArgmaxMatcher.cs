// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: object_detection/protos/argmax_matcher.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Models.ObjectDetection.Protos {

  /// <summary>Holder for reflection information generated from object_detection/protos/argmax_matcher.proto</summary>
  public static partial class ArgmaxMatcherReflection {

    #region Descriptor
    /// <summary>File descriptor for object_detection/protos/argmax_matcher.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArgmaxMatcherReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixvYmplY3RfZGV0ZWN0aW9uL3Byb3Rvcy9hcmdtYXhfbWF0Y2hlci5wcm90",
            "bxIXb2JqZWN0X2RldGVjdGlvbi5wcm90b3MixwEKDUFyZ01heE1hdGNoZXIS",
            "GQoRbWF0Y2hlZF90aHJlc2hvbGQYASABKAISGwoTdW5tYXRjaGVkX3RocmVz",
            "aG9sZBgCIAEoAhIZChFpZ25vcmVfdGhyZXNob2xkcxgDIAEoCBImCh5uZWdh",
            "dGl2ZXNfbG93ZXJfdGhhbl91bm1hdGNoZWQYBCABKAgSIAoYZm9yY2VfbWF0",
            "Y2hfZm9yX2VhY2hfcm93GAUgASgIEhkKEXVzZV9tYXRtdWxfZ2F0aGVyGAYg",
            "ASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.ArgMaxMatcher), global::Tensorflow.Models.ObjectDetection.Protos.ArgMaxMatcher.Parser, new[]{ "MatchedThreshold", "UnmatchedThreshold", "IgnoreThresholds", "NegativesLowerThanUnmatched", "ForceMatchForEachRow", "UseMatmulGather" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration proto for ArgMaxMatcher. See
  /// matchers/argmax_matcher.py for details.
  /// </summary>
  public sealed partial class ArgMaxMatcher : pb::IMessage<ArgMaxMatcher> {
    private static readonly pb::MessageParser<ArgMaxMatcher> _parser = new pb::MessageParser<ArgMaxMatcher>(() => new ArgMaxMatcher());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArgMaxMatcher> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.ArgmaxMatcherReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxMatcher() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxMatcher(ArgMaxMatcher other) : this() {
      matchedThreshold_ = other.matchedThreshold_;
      unmatchedThreshold_ = other.unmatchedThreshold_;
      ignoreThresholds_ = other.ignoreThresholds_;
      negativesLowerThanUnmatched_ = other.negativesLowerThanUnmatched_;
      forceMatchForEachRow_ = other.forceMatchForEachRow_;
      useMatmulGather_ = other.useMatmulGather_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxMatcher Clone() {
      return new ArgMaxMatcher(this);
    }

    /// <summary>Field number for the "matched_threshold" field.</summary>
    public const int MatchedThresholdFieldNumber = 1;
    private float matchedThreshold_;
    /// <summary>
    /// Threshold for positive matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MatchedThreshold {
      get { return matchedThreshold_; }
      set {
        matchedThreshold_ = value;
      }
    }

    /// <summary>Field number for the "unmatched_threshold" field.</summary>
    public const int UnmatchedThresholdFieldNumber = 2;
    private float unmatchedThreshold_;
    /// <summary>
    /// Threshold for negative matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnmatchedThreshold {
      get { return unmatchedThreshold_; }
      set {
        unmatchedThreshold_ = value;
      }
    }

    /// <summary>Field number for the "ignore_thresholds" field.</summary>
    public const int IgnoreThresholdsFieldNumber = 3;
    private bool ignoreThresholds_;
    /// <summary>
    /// Whether to construct ArgMaxMatcher without thresholds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreThresholds {
      get { return ignoreThresholds_; }
      set {
        ignoreThresholds_ = value;
      }
    }

    /// <summary>Field number for the "negatives_lower_than_unmatched" field.</summary>
    public const int NegativesLowerThanUnmatchedFieldNumber = 4;
    private bool negativesLowerThanUnmatched_;
    /// <summary>
    /// If True then negative matches are the ones below the unmatched_threshold,
    /// whereas ignored matches are in between the matched and umatched
    /// threshold. If False, then negative matches are in between the matched
    /// and unmatched threshold, and everything lower than unmatched is ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NegativesLowerThanUnmatched {
      get { return negativesLowerThanUnmatched_; }
      set {
        negativesLowerThanUnmatched_ = value;
      }
    }

    /// <summary>Field number for the "force_match_for_each_row" field.</summary>
    public const int ForceMatchForEachRowFieldNumber = 5;
    private bool forceMatchForEachRow_;
    /// <summary>
    /// Whether to ensure each row is matched to at least one column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceMatchForEachRow {
      get { return forceMatchForEachRow_; }
      set {
        forceMatchForEachRow_ = value;
      }
    }

    /// <summary>Field number for the "use_matmul_gather" field.</summary>
    public const int UseMatmulGatherFieldNumber = 6;
    private bool useMatmulGather_;
    /// <summary>
    /// Force constructed match objects to use matrix multiplication based gather
    /// instead of standard tf.gather
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMatmulGather {
      get { return useMatmulGather_; }
      set {
        useMatmulGather_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArgMaxMatcher);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArgMaxMatcher other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MatchedThreshold, other.MatchedThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnmatchedThreshold, other.UnmatchedThreshold)) return false;
      if (IgnoreThresholds != other.IgnoreThresholds) return false;
      if (NegativesLowerThanUnmatched != other.NegativesLowerThanUnmatched) return false;
      if (ForceMatchForEachRow != other.ForceMatchForEachRow) return false;
      if (UseMatmulGather != other.UseMatmulGather) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchedThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MatchedThreshold);
      if (UnmatchedThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnmatchedThreshold);
      if (IgnoreThresholds != false) hash ^= IgnoreThresholds.GetHashCode();
      if (NegativesLowerThanUnmatched != false) hash ^= NegativesLowerThanUnmatched.GetHashCode();
      if (ForceMatchForEachRow != false) hash ^= ForceMatchForEachRow.GetHashCode();
      if (UseMatmulGather != false) hash ^= UseMatmulGather.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchedThreshold != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MatchedThreshold);
      }
      if (UnmatchedThreshold != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(UnmatchedThreshold);
      }
      if (IgnoreThresholds != false) {
        output.WriteRawTag(24);
        output.WriteBool(IgnoreThresholds);
      }
      if (NegativesLowerThanUnmatched != false) {
        output.WriteRawTag(32);
        output.WriteBool(NegativesLowerThanUnmatched);
      }
      if (ForceMatchForEachRow != false) {
        output.WriteRawTag(40);
        output.WriteBool(ForceMatchForEachRow);
      }
      if (UseMatmulGather != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseMatmulGather);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchedThreshold != 0F) {
        size += 1 + 4;
      }
      if (UnmatchedThreshold != 0F) {
        size += 1 + 4;
      }
      if (IgnoreThresholds != false) {
        size += 1 + 1;
      }
      if (NegativesLowerThanUnmatched != false) {
        size += 1 + 1;
      }
      if (ForceMatchForEachRow != false) {
        size += 1 + 1;
      }
      if (UseMatmulGather != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArgMaxMatcher other) {
      if (other == null) {
        return;
      }
      if (other.MatchedThreshold != 0F) {
        MatchedThreshold = other.MatchedThreshold;
      }
      if (other.UnmatchedThreshold != 0F) {
        UnmatchedThreshold = other.UnmatchedThreshold;
      }
      if (other.IgnoreThresholds != false) {
        IgnoreThresholds = other.IgnoreThresholds;
      }
      if (other.NegativesLowerThanUnmatched != false) {
        NegativesLowerThanUnmatched = other.NegativesLowerThanUnmatched;
      }
      if (other.ForceMatchForEachRow != false) {
        ForceMatchForEachRow = other.ForceMatchForEachRow;
      }
      if (other.UseMatmulGather != false) {
        UseMatmulGather = other.UseMatmulGather;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            MatchedThreshold = input.ReadFloat();
            break;
          }
          case 21: {
            UnmatchedThreshold = input.ReadFloat();
            break;
          }
          case 24: {
            IgnoreThresholds = input.ReadBool();
            break;
          }
          case 32: {
            NegativesLowerThanUnmatched = input.ReadBool();
            break;
          }
          case 40: {
            ForceMatchForEachRow = input.ReadBool();
            break;
          }
          case 48: {
            UseMatmulGather = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
