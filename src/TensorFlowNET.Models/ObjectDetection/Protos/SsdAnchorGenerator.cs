// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: object_detection/protos/ssd_anchor_generator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Models.ObjectDetection.Protos {

  /// <summary>Holder for reflection information generated from object_detection/protos/ssd_anchor_generator.proto</summary>
  public static partial class SsdAnchorGeneratorReflection {

    #region Descriptor
    /// <summary>File descriptor for object_detection/protos/ssd_anchor_generator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SsdAnchorGeneratorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJvYmplY3RfZGV0ZWN0aW9uL3Byb3Rvcy9zc2RfYW5jaG9yX2dlbmVyYXRv",
            "ci5wcm90bxIXb2JqZWN0X2RldGVjdGlvbi5wcm90b3Mi1QIKElNzZEFuY2hv",
            "ckdlbmVyYXRvchISCgpudW1fbGF5ZXJzGAEgASgFEhEKCW1pbl9zY2FsZRgC",
            "IAEoAhIRCgltYXhfc2NhbGUYAyABKAISDgoGc2NhbGVzGAwgAygCEhUKDWFz",
            "cGVjdF9yYXRpb3MYBCADKAISJwofaW50ZXJwb2xhdGVkX3NjYWxlX2FzcGVj",
            "dF9yYXRpbxgNIAEoAhIkChxyZWR1Y2VfYm94ZXNfaW5fbG93ZXN0X2xheWVy",
            "GAUgASgIEhoKEmJhc2VfYW5jaG9yX2hlaWdodBgGIAEoAhIZChFiYXNlX2Fu",
            "Y2hvcl93aWR0aBgHIAEoAhIVCg1oZWlnaHRfc3RyaWRlGAggAygFEhQKDHdp",
            "ZHRoX3N0cmlkZRgJIAMoBRIVCg1oZWlnaHRfb2Zmc2V0GAogAygFEhQKDHdp",
            "ZHRoX29mZnNldBgLIAMoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.SsdAnchorGenerator), global::Tensorflow.Models.ObjectDetection.Protos.SsdAnchorGenerator.Parser, new[]{ "NumLayers", "MinScale", "MaxScale", "Scales", "AspectRatios", "InterpolatedScaleAspectRatio", "ReduceBoxesInLowestLayer", "BaseAnchorHeight", "BaseAnchorWidth", "HeightStride", "WidthStride", "HeightOffset", "WidthOffset" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration proto for SSD anchor generator described in
  /// https://arxiv.org/abs/1512.02325. See
  /// anchor_generators/multiple_grid_anchor_generator.py for details.
  /// </summary>
  public sealed partial class SsdAnchorGenerator : pb::IMessage<SsdAnchorGenerator> {
    private static readonly pb::MessageParser<SsdAnchorGenerator> _parser = new pb::MessageParser<SsdAnchorGenerator>(() => new SsdAnchorGenerator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SsdAnchorGenerator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.SsdAnchorGeneratorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsdAnchorGenerator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsdAnchorGenerator(SsdAnchorGenerator other) : this() {
      numLayers_ = other.numLayers_;
      minScale_ = other.minScale_;
      maxScale_ = other.maxScale_;
      scales_ = other.scales_.Clone();
      aspectRatios_ = other.aspectRatios_.Clone();
      interpolatedScaleAspectRatio_ = other.interpolatedScaleAspectRatio_;
      reduceBoxesInLowestLayer_ = other.reduceBoxesInLowestLayer_;
      baseAnchorHeight_ = other.baseAnchorHeight_;
      baseAnchorWidth_ = other.baseAnchorWidth_;
      heightStride_ = other.heightStride_.Clone();
      widthStride_ = other.widthStride_.Clone();
      heightOffset_ = other.heightOffset_.Clone();
      widthOffset_ = other.widthOffset_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsdAnchorGenerator Clone() {
      return new SsdAnchorGenerator(this);
    }

    /// <summary>Field number for the "num_layers" field.</summary>
    public const int NumLayersFieldNumber = 1;
    private int numLayers_;
    /// <summary>
    /// Number of grid layers to create anchors for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumLayers {
      get { return numLayers_; }
      set {
        numLayers_ = value;
      }
    }

    /// <summary>Field number for the "min_scale" field.</summary>
    public const int MinScaleFieldNumber = 2;
    private float minScale_;
    /// <summary>
    /// Scale of anchors corresponding to finest resolution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinScale {
      get { return minScale_; }
      set {
        minScale_ = value;
      }
    }

    /// <summary>Field number for the "max_scale" field.</summary>
    public const int MaxScaleFieldNumber = 3;
    private float maxScale_;
    /// <summary>
    /// Scale of anchors corresponding to coarsest resolution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxScale {
      get { return maxScale_; }
      set {
        maxScale_ = value;
      }
    }

    /// <summary>Field number for the "scales" field.</summary>
    public const int ScalesFieldNumber = 12;
    private static readonly pb::FieldCodec<float> _repeated_scales_codec
        = pb::FieldCodec.ForFloat(98);
    private readonly pbc::RepeatedField<float> scales_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Can be used to override min_scale->max_scale, with an explicitly defined
    /// set of scales.  If empty, then min_scale->max_scale is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Scales {
      get { return scales_; }
    }

    /// <summary>Field number for the "aspect_ratios" field.</summary>
    public const int AspectRatiosFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_aspectRatios_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> aspectRatios_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Aspect ratios for anchors at each grid point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AspectRatios {
      get { return aspectRatios_; }
    }

    /// <summary>Field number for the "interpolated_scale_aspect_ratio" field.</summary>
    public const int InterpolatedScaleAspectRatioFieldNumber = 13;
    private float interpolatedScaleAspectRatio_;
    /// <summary>
    /// When this aspect ratio is greater than 0, then an additional
    /// anchor, with an interpolated scale is added with this aspect ratio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InterpolatedScaleAspectRatio {
      get { return interpolatedScaleAspectRatio_; }
      set {
        interpolatedScaleAspectRatio_ = value;
      }
    }

    /// <summary>Field number for the "reduce_boxes_in_lowest_layer" field.</summary>
    public const int ReduceBoxesInLowestLayerFieldNumber = 5;
    private bool reduceBoxesInLowestLayer_;
    /// <summary>
    /// Whether to use the following aspect ratio and scale combination for the
    /// layer with the finest resolution : (scale=0.1, aspect_ratio=1.0),
    /// (scale=min_scale, aspect_ration=2.0), (scale=min_scale, aspect_ratio=0.5).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReduceBoxesInLowestLayer {
      get { return reduceBoxesInLowestLayer_; }
      set {
        reduceBoxesInLowestLayer_ = value;
      }
    }

    /// <summary>Field number for the "base_anchor_height" field.</summary>
    public const int BaseAnchorHeightFieldNumber = 6;
    private float baseAnchorHeight_;
    /// <summary>
    /// The base anchor size in height dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseAnchorHeight {
      get { return baseAnchorHeight_; }
      set {
        baseAnchorHeight_ = value;
      }
    }

    /// <summary>Field number for the "base_anchor_width" field.</summary>
    public const int BaseAnchorWidthFieldNumber = 7;
    private float baseAnchorWidth_;
    /// <summary>
    /// The base anchor size in width dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseAnchorWidth {
      get { return baseAnchorWidth_; }
      set {
        baseAnchorWidth_ = value;
      }
    }

    /// <summary>Field number for the "height_stride" field.</summary>
    public const int HeightStrideFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_heightStride_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> heightStride_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Anchor stride in height dimension in pixels for each layer. The length of
    /// this field is expected to be equal to the value of num_layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeightStride {
      get { return heightStride_; }
    }

    /// <summary>Field number for the "width_stride" field.</summary>
    public const int WidthStrideFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_widthStride_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> widthStride_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Anchor stride in width dimension in pixels for each layer. The length of
    /// this field is expected to be equal to the value of num_layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WidthStride {
      get { return widthStride_; }
    }

    /// <summary>Field number for the "height_offset" field.</summary>
    public const int HeightOffsetFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_heightOffset_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> heightOffset_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Anchor height offset in pixels for each layer. The length of this field is
    /// expected to be equal to the value of num_layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeightOffset {
      get { return heightOffset_; }
    }

    /// <summary>Field number for the "width_offset" field.</summary>
    public const int WidthOffsetFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_widthOffset_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> widthOffset_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Anchor width offset in pixels for each layer. The length of this field is
    /// expected to be equal to the value of num_layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WidthOffset {
      get { return widthOffset_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SsdAnchorGenerator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SsdAnchorGenerator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumLayers != other.NumLayers) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinScale, other.MinScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxScale, other.MaxScale)) return false;
      if(!scales_.Equals(other.scales_)) return false;
      if(!aspectRatios_.Equals(other.aspectRatios_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InterpolatedScaleAspectRatio, other.InterpolatedScaleAspectRatio)) return false;
      if (ReduceBoxesInLowestLayer != other.ReduceBoxesInLowestLayer) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseAnchorHeight, other.BaseAnchorHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseAnchorWidth, other.BaseAnchorWidth)) return false;
      if(!heightStride_.Equals(other.heightStride_)) return false;
      if(!widthStride_.Equals(other.widthStride_)) return false;
      if(!heightOffset_.Equals(other.heightOffset_)) return false;
      if(!widthOffset_.Equals(other.widthOffset_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumLayers != 0) hash ^= NumLayers.GetHashCode();
      if (MinScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinScale);
      if (MaxScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxScale);
      hash ^= scales_.GetHashCode();
      hash ^= aspectRatios_.GetHashCode();
      if (InterpolatedScaleAspectRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InterpolatedScaleAspectRatio);
      if (ReduceBoxesInLowestLayer != false) hash ^= ReduceBoxesInLowestLayer.GetHashCode();
      if (BaseAnchorHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseAnchorHeight);
      if (BaseAnchorWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseAnchorWidth);
      hash ^= heightStride_.GetHashCode();
      hash ^= widthStride_.GetHashCode();
      hash ^= heightOffset_.GetHashCode();
      hash ^= widthOffset_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumLayers != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumLayers);
      }
      if (MinScale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MinScale);
      }
      if (MaxScale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MaxScale);
      }
      aspectRatios_.WriteTo(output, _repeated_aspectRatios_codec);
      if (ReduceBoxesInLowestLayer != false) {
        output.WriteRawTag(40);
        output.WriteBool(ReduceBoxesInLowestLayer);
      }
      if (BaseAnchorHeight != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BaseAnchorHeight);
      }
      if (BaseAnchorWidth != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(BaseAnchorWidth);
      }
      heightStride_.WriteTo(output, _repeated_heightStride_codec);
      widthStride_.WriteTo(output, _repeated_widthStride_codec);
      heightOffset_.WriteTo(output, _repeated_heightOffset_codec);
      widthOffset_.WriteTo(output, _repeated_widthOffset_codec);
      scales_.WriteTo(output, _repeated_scales_codec);
      if (InterpolatedScaleAspectRatio != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(InterpolatedScaleAspectRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumLayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumLayers);
      }
      if (MinScale != 0F) {
        size += 1 + 4;
      }
      if (MaxScale != 0F) {
        size += 1 + 4;
      }
      size += scales_.CalculateSize(_repeated_scales_codec);
      size += aspectRatios_.CalculateSize(_repeated_aspectRatios_codec);
      if (InterpolatedScaleAspectRatio != 0F) {
        size += 1 + 4;
      }
      if (ReduceBoxesInLowestLayer != false) {
        size += 1 + 1;
      }
      if (BaseAnchorHeight != 0F) {
        size += 1 + 4;
      }
      if (BaseAnchorWidth != 0F) {
        size += 1 + 4;
      }
      size += heightStride_.CalculateSize(_repeated_heightStride_codec);
      size += widthStride_.CalculateSize(_repeated_widthStride_codec);
      size += heightOffset_.CalculateSize(_repeated_heightOffset_codec);
      size += widthOffset_.CalculateSize(_repeated_widthOffset_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SsdAnchorGenerator other) {
      if (other == null) {
        return;
      }
      if (other.NumLayers != 0) {
        NumLayers = other.NumLayers;
      }
      if (other.MinScale != 0F) {
        MinScale = other.MinScale;
      }
      if (other.MaxScale != 0F) {
        MaxScale = other.MaxScale;
      }
      scales_.Add(other.scales_);
      aspectRatios_.Add(other.aspectRatios_);
      if (other.InterpolatedScaleAspectRatio != 0F) {
        InterpolatedScaleAspectRatio = other.InterpolatedScaleAspectRatio;
      }
      if (other.ReduceBoxesInLowestLayer != false) {
        ReduceBoxesInLowestLayer = other.ReduceBoxesInLowestLayer;
      }
      if (other.BaseAnchorHeight != 0F) {
        BaseAnchorHeight = other.BaseAnchorHeight;
      }
      if (other.BaseAnchorWidth != 0F) {
        BaseAnchorWidth = other.BaseAnchorWidth;
      }
      heightStride_.Add(other.heightStride_);
      widthStride_.Add(other.widthStride_);
      heightOffset_.Add(other.heightOffset_);
      widthOffset_.Add(other.widthOffset_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumLayers = input.ReadInt32();
            break;
          }
          case 21: {
            MinScale = input.ReadFloat();
            break;
          }
          case 29: {
            MaxScale = input.ReadFloat();
            break;
          }
          case 34:
          case 37: {
            aspectRatios_.AddEntriesFrom(input, _repeated_aspectRatios_codec);
            break;
          }
          case 40: {
            ReduceBoxesInLowestLayer = input.ReadBool();
            break;
          }
          case 53: {
            BaseAnchorHeight = input.ReadFloat();
            break;
          }
          case 61: {
            BaseAnchorWidth = input.ReadFloat();
            break;
          }
          case 66:
          case 64: {
            heightStride_.AddEntriesFrom(input, _repeated_heightStride_codec);
            break;
          }
          case 74:
          case 72: {
            widthStride_.AddEntriesFrom(input, _repeated_widthStride_codec);
            break;
          }
          case 82:
          case 80: {
            heightOffset_.AddEntriesFrom(input, _repeated_heightOffset_codec);
            break;
          }
          case 90:
          case 88: {
            widthOffset_.AddEntriesFrom(input, _repeated_widthOffset_codec);
            break;
          }
          case 98:
          case 101: {
            scales_.AddEntriesFrom(input, _repeated_scales_codec);
            break;
          }
          case 109: {
            InterpolatedScaleAspectRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
