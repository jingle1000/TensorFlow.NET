// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: object_detection/protos/image_resizer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Models.ObjectDetection.Protos {

  /// <summary>Holder for reflection information generated from object_detection/protos/image_resizer.proto</summary>
  public static partial class ImageResizerReflection {

    #region Descriptor
    /// <summary>File descriptor for object_detection/protos/image_resizer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageResizerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitvYmplY3RfZGV0ZWN0aW9uL3Byb3Rvcy9pbWFnZV9yZXNpemVyLnByb3Rv",
            "EhdvYmplY3RfZGV0ZWN0aW9uLnByb3RvcyLjAgoMSW1hZ2VSZXNpemVyElQK",
            "GWtlZXBfYXNwZWN0X3JhdGlvX3Jlc2l6ZXIYASABKAsyLy5vYmplY3RfZGV0",
            "ZWN0aW9uLnByb3Rvcy5LZWVwQXNwZWN0UmF0aW9SZXNpemVySAASSQoTZml4",
            "ZWRfc2hhcGVfcmVzaXplchgCIAEoCzIqLm9iamVjdF9kZXRlY3Rpb24ucHJv",
            "dG9zLkZpeGVkU2hhcGVSZXNpemVySAASRAoQaWRlbnRpdHlfcmVzaXplchgD",
            "IAEoCzIoLm9iamVjdF9kZXRlY3Rpb24ucHJvdG9zLklkZW50aXR5UmVzaXpl",
            "ckgAElUKGWNvbmRpdGlvbmFsX3NoYXBlX3Jlc2l6ZXIYBCABKAsyMC5vYmpl",
            "Y3RfZGV0ZWN0aW9uLnByb3Rvcy5Db25kaXRpb25hbFNoYXBlUmVzaXplckgA",
            "QhUKE2ltYWdlX3Jlc2l6ZXJfb25lb2YiEQoPSWRlbnRpdHlSZXNpemVyIt0B",
            "ChZLZWVwQXNwZWN0UmF0aW9SZXNpemVyEhUKDW1pbl9kaW1lbnNpb24YASAB",
            "KAUSFQoNbWF4X2RpbWVuc2lvbhgCIAEoBRI6Cg1yZXNpemVfbWV0aG9kGAMg",
            "ASgOMiMub2JqZWN0X2RldGVjdGlvbi5wcm90b3MuUmVzaXplVHlwZRIcChRw",
            "YWRfdG9fbWF4X2RpbWVuc2lvbhgEIAEoCBIcChRjb252ZXJ0X3RvX2dyYXlz",
            "Y2FsZRgFIAEoCBIdChVwZXJfY2hhbm5lbF9wYWRfdmFsdWUYBiADKAIijAEK",
            "EUZpeGVkU2hhcGVSZXNpemVyEg4KBmhlaWdodBgBIAEoBRINCgV3aWR0aBgC",
            "IAEoBRI6Cg1yZXNpemVfbWV0aG9kGAMgASgOMiMub2JqZWN0X2RldGVjdGlv",
            "bi5wcm90b3MuUmVzaXplVHlwZRIcChRjb252ZXJ0X3RvX2dyYXlzY2FsZRgE",
            "IAEoCCKaAgoXQ29uZGl0aW9uYWxTaGFwZVJlc2l6ZXISUwoJY29uZGl0aW9u",
            "GAEgASgOMkAub2JqZWN0X2RldGVjdGlvbi5wcm90b3MuQ29uZGl0aW9uYWxT",
            "aGFwZVJlc2l6ZXIuUmVzaXplQ29uZGl0aW9uEhYKDnNpemVfdGhyZXNob2xk",
            "GAIgASgFEjoKDXJlc2l6ZV9tZXRob2QYAyABKA4yIy5vYmplY3RfZGV0ZWN0",
            "aW9uLnByb3Rvcy5SZXNpemVUeXBlEhwKFGNvbnZlcnRfdG9fZ3JheXNjYWxl",
            "GAQgASgIIjgKD1Jlc2l6ZUNvbmRpdGlvbhILCgdJTlZBTElEEAASCwoHR1JF",
            "QVRFUhABEgsKB1NNQUxMRVIQAipHCgpSZXNpemVUeXBlEgwKCEJJTElORUFS",
            "EAASFAoQTkVBUkVTVF9ORUlHSEJPUhABEgsKB0JJQ1VCSUMQAhIICgRBUkVB",
            "EANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tensorflow.Models.ObjectDetection.Protos.ResizeType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.ImageResizer), global::Tensorflow.Models.ObjectDetection.Protos.ImageResizer.Parser, new[]{ "KeepAspectRatioResizer", "FixedShapeResizer", "IdentityResizer", "ConditionalShapeResizer" }, new[]{ "ImageResizerOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.IdentityResizer), global::Tensorflow.Models.ObjectDetection.Protos.IdentityResizer.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.KeepAspectRatioResizer), global::Tensorflow.Models.ObjectDetection.Protos.KeepAspectRatioResizer.Parser, new[]{ "MinDimension", "MaxDimension", "ResizeMethod", "PadToMaxDimension", "ConvertToGrayscale", "PerChannelPadValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.FixedShapeResizer), global::Tensorflow.Models.ObjectDetection.Protos.FixedShapeResizer.Parser, new[]{ "Height", "Width", "ResizeMethod", "ConvertToGrayscale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer), global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer.Parser, new[]{ "Condition", "SizeThreshold", "ResizeMethod", "ConvertToGrayscale" }, null, new[]{ typeof(global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer.Types.ResizeCondition) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Enumeration type for image resizing methods provided in TensorFlow.
  /// </summary>
  public enum ResizeType {
    /// <summary>
    /// Corresponds to tf.image.ResizeMethod.BILINEAR
    /// </summary>
    [pbr::OriginalName("BILINEAR")] Bilinear = 0,
    /// <summary>
    /// Corresponds to tf.image.ResizeMethod.NEAREST_NEIGHBOR
    /// </summary>
    [pbr::OriginalName("NEAREST_NEIGHBOR")] NearestNeighbor = 1,
    /// <summary>
    /// Corresponds to tf.image.ResizeMethod.BICUBIC
    /// </summary>
    [pbr::OriginalName("BICUBIC")] Bicubic = 2,
    /// <summary>
    /// Corresponds to tf.image.ResizeMethod.AREA
    /// </summary>
    [pbr::OriginalName("AREA")] Area = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Configuration proto for image resizing operations.
  /// See builders/image_resizer_builder.py for details.
  /// </summary>
  public sealed partial class ImageResizer : pb::IMessage<ImageResizer> {
    private static readonly pb::MessageParser<ImageResizer> _parser = new pb::MessageParser<ImageResizer>(() => new ImageResizer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageResizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.ImageResizerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageResizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageResizer(ImageResizer other) : this() {
      switch (other.ImageResizerOneofCase) {
        case ImageResizerOneofOneofCase.KeepAspectRatioResizer:
          KeepAspectRatioResizer = other.KeepAspectRatioResizer.Clone();
          break;
        case ImageResizerOneofOneofCase.FixedShapeResizer:
          FixedShapeResizer = other.FixedShapeResizer.Clone();
          break;
        case ImageResizerOneofOneofCase.IdentityResizer:
          IdentityResizer = other.IdentityResizer.Clone();
          break;
        case ImageResizerOneofOneofCase.ConditionalShapeResizer:
          ConditionalShapeResizer = other.ConditionalShapeResizer.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageResizer Clone() {
      return new ImageResizer(this);
    }

    /// <summary>Field number for the "keep_aspect_ratio_resizer" field.</summary>
    public const int KeepAspectRatioResizerFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.KeepAspectRatioResizer KeepAspectRatioResizer {
      get { return imageResizerOneofCase_ == ImageResizerOneofOneofCase.KeepAspectRatioResizer ? (global::Tensorflow.Models.ObjectDetection.Protos.KeepAspectRatioResizer) imageResizerOneof_ : null; }
      set {
        imageResizerOneof_ = value;
        imageResizerOneofCase_ = value == null ? ImageResizerOneofOneofCase.None : ImageResizerOneofOneofCase.KeepAspectRatioResizer;
      }
    }

    /// <summary>Field number for the "fixed_shape_resizer" field.</summary>
    public const int FixedShapeResizerFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.FixedShapeResizer FixedShapeResizer {
      get { return imageResizerOneofCase_ == ImageResizerOneofOneofCase.FixedShapeResizer ? (global::Tensorflow.Models.ObjectDetection.Protos.FixedShapeResizer) imageResizerOneof_ : null; }
      set {
        imageResizerOneof_ = value;
        imageResizerOneofCase_ = value == null ? ImageResizerOneofOneofCase.None : ImageResizerOneofOneofCase.FixedShapeResizer;
      }
    }

    /// <summary>Field number for the "identity_resizer" field.</summary>
    public const int IdentityResizerFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.IdentityResizer IdentityResizer {
      get { return imageResizerOneofCase_ == ImageResizerOneofOneofCase.IdentityResizer ? (global::Tensorflow.Models.ObjectDetection.Protos.IdentityResizer) imageResizerOneof_ : null; }
      set {
        imageResizerOneof_ = value;
        imageResizerOneofCase_ = value == null ? ImageResizerOneofOneofCase.None : ImageResizerOneofOneofCase.IdentityResizer;
      }
    }

    /// <summary>Field number for the "conditional_shape_resizer" field.</summary>
    public const int ConditionalShapeResizerFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer ConditionalShapeResizer {
      get { return imageResizerOneofCase_ == ImageResizerOneofOneofCase.ConditionalShapeResizer ? (global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer) imageResizerOneof_ : null; }
      set {
        imageResizerOneof_ = value;
        imageResizerOneofCase_ = value == null ? ImageResizerOneofOneofCase.None : ImageResizerOneofOneofCase.ConditionalShapeResizer;
      }
    }

    private object imageResizerOneof_;
    /// <summary>Enum of possible cases for the "image_resizer_oneof" oneof.</summary>
    public enum ImageResizerOneofOneofCase {
      None = 0,
      KeepAspectRatioResizer = 1,
      FixedShapeResizer = 2,
      IdentityResizer = 3,
      ConditionalShapeResizer = 4,
    }
    private ImageResizerOneofOneofCase imageResizerOneofCase_ = ImageResizerOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageResizerOneofOneofCase ImageResizerOneofCase {
      get { return imageResizerOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageResizerOneof() {
      imageResizerOneofCase_ = ImageResizerOneofOneofCase.None;
      imageResizerOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageResizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageResizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(KeepAspectRatioResizer, other.KeepAspectRatioResizer)) return false;
      if (!object.Equals(FixedShapeResizer, other.FixedShapeResizer)) return false;
      if (!object.Equals(IdentityResizer, other.IdentityResizer)) return false;
      if (!object.Equals(ConditionalShapeResizer, other.ConditionalShapeResizer)) return false;
      if (ImageResizerOneofCase != other.ImageResizerOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.KeepAspectRatioResizer) hash ^= KeepAspectRatioResizer.GetHashCode();
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.FixedShapeResizer) hash ^= FixedShapeResizer.GetHashCode();
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.IdentityResizer) hash ^= IdentityResizer.GetHashCode();
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.ConditionalShapeResizer) hash ^= ConditionalShapeResizer.GetHashCode();
      hash ^= (int) imageResizerOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.KeepAspectRatioResizer) {
        output.WriteRawTag(10);
        output.WriteMessage(KeepAspectRatioResizer);
      }
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.FixedShapeResizer) {
        output.WriteRawTag(18);
        output.WriteMessage(FixedShapeResizer);
      }
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.IdentityResizer) {
        output.WriteRawTag(26);
        output.WriteMessage(IdentityResizer);
      }
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.ConditionalShapeResizer) {
        output.WriteRawTag(34);
        output.WriteMessage(ConditionalShapeResizer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.KeepAspectRatioResizer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeepAspectRatioResizer);
      }
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.FixedShapeResizer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedShapeResizer);
      }
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.IdentityResizer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityResizer);
      }
      if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.ConditionalShapeResizer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConditionalShapeResizer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageResizer other) {
      if (other == null) {
        return;
      }
      switch (other.ImageResizerOneofCase) {
        case ImageResizerOneofOneofCase.KeepAspectRatioResizer:
          if (KeepAspectRatioResizer == null) {
            KeepAspectRatioResizer = new global::Tensorflow.Models.ObjectDetection.Protos.KeepAspectRatioResizer();
          }
          KeepAspectRatioResizer.MergeFrom(other.KeepAspectRatioResizer);
          break;
        case ImageResizerOneofOneofCase.FixedShapeResizer:
          if (FixedShapeResizer == null) {
            FixedShapeResizer = new global::Tensorflow.Models.ObjectDetection.Protos.FixedShapeResizer();
          }
          FixedShapeResizer.MergeFrom(other.FixedShapeResizer);
          break;
        case ImageResizerOneofOneofCase.IdentityResizer:
          if (IdentityResizer == null) {
            IdentityResizer = new global::Tensorflow.Models.ObjectDetection.Protos.IdentityResizer();
          }
          IdentityResizer.MergeFrom(other.IdentityResizer);
          break;
        case ImageResizerOneofOneofCase.ConditionalShapeResizer:
          if (ConditionalShapeResizer == null) {
            ConditionalShapeResizer = new global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer();
          }
          ConditionalShapeResizer.MergeFrom(other.ConditionalShapeResizer);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Tensorflow.Models.ObjectDetection.Protos.KeepAspectRatioResizer subBuilder = new global::Tensorflow.Models.ObjectDetection.Protos.KeepAspectRatioResizer();
            if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.KeepAspectRatioResizer) {
              subBuilder.MergeFrom(KeepAspectRatioResizer);
            }
            input.ReadMessage(subBuilder);
            KeepAspectRatioResizer = subBuilder;
            break;
          }
          case 18: {
            global::Tensorflow.Models.ObjectDetection.Protos.FixedShapeResizer subBuilder = new global::Tensorflow.Models.ObjectDetection.Protos.FixedShapeResizer();
            if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.FixedShapeResizer) {
              subBuilder.MergeFrom(FixedShapeResizer);
            }
            input.ReadMessage(subBuilder);
            FixedShapeResizer = subBuilder;
            break;
          }
          case 26: {
            global::Tensorflow.Models.ObjectDetection.Protos.IdentityResizer subBuilder = new global::Tensorflow.Models.ObjectDetection.Protos.IdentityResizer();
            if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.IdentityResizer) {
              subBuilder.MergeFrom(IdentityResizer);
            }
            input.ReadMessage(subBuilder);
            IdentityResizer = subBuilder;
            break;
          }
          case 34: {
            global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer subBuilder = new global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer();
            if (imageResizerOneofCase_ == ImageResizerOneofOneofCase.ConditionalShapeResizer) {
              subBuilder.MergeFrom(ConditionalShapeResizer);
            }
            input.ReadMessage(subBuilder);
            ConditionalShapeResizer = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdentityResizer : pb::IMessage<IdentityResizer> {
    private static readonly pb::MessageParser<IdentityResizer> _parser = new pb::MessageParser<IdentityResizer>(() => new IdentityResizer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentityResizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.ImageResizerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityResizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityResizer(IdentityResizer other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityResizer Clone() {
      return new IdentityResizer(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentityResizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentityResizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentityResizer other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Configuration proto for image resizer that keeps aspect ratio.
  /// </summary>
  public sealed partial class KeepAspectRatioResizer : pb::IMessage<KeepAspectRatioResizer> {
    private static readonly pb::MessageParser<KeepAspectRatioResizer> _parser = new pb::MessageParser<KeepAspectRatioResizer>(() => new KeepAspectRatioResizer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAspectRatioResizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.ImageResizerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAspectRatioResizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAspectRatioResizer(KeepAspectRatioResizer other) : this() {
      minDimension_ = other.minDimension_;
      maxDimension_ = other.maxDimension_;
      resizeMethod_ = other.resizeMethod_;
      padToMaxDimension_ = other.padToMaxDimension_;
      convertToGrayscale_ = other.convertToGrayscale_;
      perChannelPadValue_ = other.perChannelPadValue_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAspectRatioResizer Clone() {
      return new KeepAspectRatioResizer(this);
    }

    /// <summary>Field number for the "min_dimension" field.</summary>
    public const int MinDimensionFieldNumber = 1;
    private int minDimension_;
    /// <summary>
    /// Desired size of the smaller image dimension in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDimension {
      get { return minDimension_; }
      set {
        minDimension_ = value;
      }
    }

    /// <summary>Field number for the "max_dimension" field.</summary>
    public const int MaxDimensionFieldNumber = 2;
    private int maxDimension_;
    /// <summary>
    /// Desired size of the larger image dimension in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDimension {
      get { return maxDimension_; }
      set {
        maxDimension_ = value;
      }
    }

    /// <summary>Field number for the "resize_method" field.</summary>
    public const int ResizeMethodFieldNumber = 3;
    private global::Tensorflow.Models.ObjectDetection.Protos.ResizeType resizeMethod_ = 0;
    /// <summary>
    /// Desired method when resizing image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ResizeType ResizeMethod {
      get { return resizeMethod_; }
      set {
        resizeMethod_ = value;
      }
    }

    /// <summary>Field number for the "pad_to_max_dimension" field.</summary>
    public const int PadToMaxDimensionFieldNumber = 4;
    private bool padToMaxDimension_;
    /// <summary>
    /// Whether to pad the image with zeros so the output spatial size is
    /// [max_dimension, max_dimension]. Note that the zeros are padded to the
    /// bottom and the right of the resized image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PadToMaxDimension {
      get { return padToMaxDimension_; }
      set {
        padToMaxDimension_ = value;
      }
    }

    /// <summary>Field number for the "convert_to_grayscale" field.</summary>
    public const int ConvertToGrayscaleFieldNumber = 5;
    private bool convertToGrayscale_;
    /// <summary>
    /// Whether to also resize the image channels from 3 to 1 (RGB to grayscale).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConvertToGrayscale {
      get { return convertToGrayscale_; }
      set {
        convertToGrayscale_ = value;
      }
    }

    /// <summary>Field number for the "per_channel_pad_value" field.</summary>
    public const int PerChannelPadValueFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_perChannelPadValue_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> perChannelPadValue_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Per-channel pad value. This is only used when pad_to_max_dimension is True.
    /// If unspecified, a default pad value of 0 is applied to all channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PerChannelPadValue {
      get { return perChannelPadValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAspectRatioResizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAspectRatioResizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinDimension != other.MinDimension) return false;
      if (MaxDimension != other.MaxDimension) return false;
      if (ResizeMethod != other.ResizeMethod) return false;
      if (PadToMaxDimension != other.PadToMaxDimension) return false;
      if (ConvertToGrayscale != other.ConvertToGrayscale) return false;
      if(!perChannelPadValue_.Equals(other.perChannelPadValue_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinDimension != 0) hash ^= MinDimension.GetHashCode();
      if (MaxDimension != 0) hash ^= MaxDimension.GetHashCode();
      if (ResizeMethod != 0) hash ^= ResizeMethod.GetHashCode();
      if (PadToMaxDimension != false) hash ^= PadToMaxDimension.GetHashCode();
      if (ConvertToGrayscale != false) hash ^= ConvertToGrayscale.GetHashCode();
      hash ^= perChannelPadValue_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinDimension != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinDimension);
      }
      if (MaxDimension != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxDimension);
      }
      if (ResizeMethod != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ResizeMethod);
      }
      if (PadToMaxDimension != false) {
        output.WriteRawTag(32);
        output.WriteBool(PadToMaxDimension);
      }
      if (ConvertToGrayscale != false) {
        output.WriteRawTag(40);
        output.WriteBool(ConvertToGrayscale);
      }
      perChannelPadValue_.WriteTo(output, _repeated_perChannelPadValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinDimension != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinDimension);
      }
      if (MaxDimension != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDimension);
      }
      if (ResizeMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResizeMethod);
      }
      if (PadToMaxDimension != false) {
        size += 1 + 1;
      }
      if (ConvertToGrayscale != false) {
        size += 1 + 1;
      }
      size += perChannelPadValue_.CalculateSize(_repeated_perChannelPadValue_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAspectRatioResizer other) {
      if (other == null) {
        return;
      }
      if (other.MinDimension != 0) {
        MinDimension = other.MinDimension;
      }
      if (other.MaxDimension != 0) {
        MaxDimension = other.MaxDimension;
      }
      if (other.ResizeMethod != 0) {
        ResizeMethod = other.ResizeMethod;
      }
      if (other.PadToMaxDimension != false) {
        PadToMaxDimension = other.PadToMaxDimension;
      }
      if (other.ConvertToGrayscale != false) {
        ConvertToGrayscale = other.ConvertToGrayscale;
      }
      perChannelPadValue_.Add(other.perChannelPadValue_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinDimension = input.ReadInt32();
            break;
          }
          case 16: {
            MaxDimension = input.ReadInt32();
            break;
          }
          case 24: {
            resizeMethod_ = (global::Tensorflow.Models.ObjectDetection.Protos.ResizeType) input.ReadEnum();
            break;
          }
          case 32: {
            PadToMaxDimension = input.ReadBool();
            break;
          }
          case 40: {
            ConvertToGrayscale = input.ReadBool();
            break;
          }
          case 50:
          case 53: {
            perChannelPadValue_.AddEntriesFrom(input, _repeated_perChannelPadValue_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration proto for image resizer that resizes to a fixed shape.
  /// </summary>
  public sealed partial class FixedShapeResizer : pb::IMessage<FixedShapeResizer> {
    private static readonly pb::MessageParser<FixedShapeResizer> _parser = new pb::MessageParser<FixedShapeResizer>(() => new FixedShapeResizer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FixedShapeResizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.ImageResizerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedShapeResizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedShapeResizer(FixedShapeResizer other) : this() {
      height_ = other.height_;
      width_ = other.width_;
      resizeMethod_ = other.resizeMethod_;
      convertToGrayscale_ = other.convertToGrayscale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedShapeResizer Clone() {
      return new FixedShapeResizer(this);
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 1;
    private int height_;
    /// <summary>
    /// Desired height of image in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private int width_;
    /// <summary>
    /// Desired width of image in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "resize_method" field.</summary>
    public const int ResizeMethodFieldNumber = 3;
    private global::Tensorflow.Models.ObjectDetection.Protos.ResizeType resizeMethod_ = 0;
    /// <summary>
    /// Desired method when resizing image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ResizeType ResizeMethod {
      get { return resizeMethod_; }
      set {
        resizeMethod_ = value;
      }
    }

    /// <summary>Field number for the "convert_to_grayscale" field.</summary>
    public const int ConvertToGrayscaleFieldNumber = 4;
    private bool convertToGrayscale_;
    /// <summary>
    /// Whether to also resize the image channels from 3 to 1 (RGB to grayscale).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConvertToGrayscale {
      get { return convertToGrayscale_; }
      set {
        convertToGrayscale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FixedShapeResizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FixedShapeResizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (ResizeMethod != other.ResizeMethod) return false;
      if (ConvertToGrayscale != other.ConvertToGrayscale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (ResizeMethod != 0) hash ^= ResizeMethod.GetHashCode();
      if (ConvertToGrayscale != false) hash ^= ConvertToGrayscale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Height != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (ResizeMethod != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ResizeMethod);
      }
      if (ConvertToGrayscale != false) {
        output.WriteRawTag(32);
        output.WriteBool(ConvertToGrayscale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (ResizeMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResizeMethod);
      }
      if (ConvertToGrayscale != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FixedShapeResizer other) {
      if (other == null) {
        return;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.ResizeMethod != 0) {
        ResizeMethod = other.ResizeMethod;
      }
      if (other.ConvertToGrayscale != false) {
        ConvertToGrayscale = other.ConvertToGrayscale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Height = input.ReadInt32();
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 24: {
            resizeMethod_ = (global::Tensorflow.Models.ObjectDetection.Protos.ResizeType) input.ReadEnum();
            break;
          }
          case 32: {
            ConvertToGrayscale = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration proto for image resizer that resizes only if input image height
  /// or width is greater or smaller than a certain size.
  /// Aspect ratio is maintained.
  /// </summary>
  public sealed partial class ConditionalShapeResizer : pb::IMessage<ConditionalShapeResizer> {
    private static readonly pb::MessageParser<ConditionalShapeResizer> _parser = new pb::MessageParser<ConditionalShapeResizer>(() => new ConditionalShapeResizer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConditionalShapeResizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.ImageResizerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConditionalShapeResizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConditionalShapeResizer(ConditionalShapeResizer other) : this() {
      condition_ = other.condition_;
      sizeThreshold_ = other.sizeThreshold_;
      resizeMethod_ = other.resizeMethod_;
      convertToGrayscale_ = other.convertToGrayscale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConditionalShapeResizer Clone() {
      return new ConditionalShapeResizer(this);
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 1;
    private global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer.Types.ResizeCondition condition_ = 0;
    /// <summary>
    /// Condition which must be true to resize the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer.Types.ResizeCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "size_threshold" field.</summary>
    public const int SizeThresholdFieldNumber = 2;
    private int sizeThreshold_;
    /// <summary>
    /// Threshold for the image size. If any image dimension is above or below this
    /// (as specified by condition) the image will be resized so that it meets the
    /// threshold.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SizeThreshold {
      get { return sizeThreshold_; }
      set {
        sizeThreshold_ = value;
      }
    }

    /// <summary>Field number for the "resize_method" field.</summary>
    public const int ResizeMethodFieldNumber = 3;
    private global::Tensorflow.Models.ObjectDetection.Protos.ResizeType resizeMethod_ = 0;
    /// <summary>
    /// Desired method when resizing image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ResizeType ResizeMethod {
      get { return resizeMethod_; }
      set {
        resizeMethod_ = value;
      }
    }

    /// <summary>Field number for the "convert_to_grayscale" field.</summary>
    public const int ConvertToGrayscaleFieldNumber = 4;
    private bool convertToGrayscale_;
    /// <summary>
    /// Whether to also resize the image channels from 3 to 1 (RGB to grayscale).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConvertToGrayscale {
      get { return convertToGrayscale_; }
      set {
        convertToGrayscale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConditionalShapeResizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConditionalShapeResizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Condition != other.Condition) return false;
      if (SizeThreshold != other.SizeThreshold) return false;
      if (ResizeMethod != other.ResizeMethod) return false;
      if (ConvertToGrayscale != other.ConvertToGrayscale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Condition != 0) hash ^= Condition.GetHashCode();
      if (SizeThreshold != 0) hash ^= SizeThreshold.GetHashCode();
      if (ResizeMethod != 0) hash ^= ResizeMethod.GetHashCode();
      if (ConvertToGrayscale != false) hash ^= ConvertToGrayscale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Condition != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Condition);
      }
      if (SizeThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SizeThreshold);
      }
      if (ResizeMethod != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ResizeMethod);
      }
      if (ConvertToGrayscale != false) {
        output.WriteRawTag(32);
        output.WriteBool(ConvertToGrayscale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Condition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Condition);
      }
      if (SizeThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SizeThreshold);
      }
      if (ResizeMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResizeMethod);
      }
      if (ConvertToGrayscale != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConditionalShapeResizer other) {
      if (other == null) {
        return;
      }
      if (other.Condition != 0) {
        Condition = other.Condition;
      }
      if (other.SizeThreshold != 0) {
        SizeThreshold = other.SizeThreshold;
      }
      if (other.ResizeMethod != 0) {
        ResizeMethod = other.ResizeMethod;
      }
      if (other.ConvertToGrayscale != false) {
        ConvertToGrayscale = other.ConvertToGrayscale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            condition_ = (global::Tensorflow.Models.ObjectDetection.Protos.ConditionalShapeResizer.Types.ResizeCondition) input.ReadEnum();
            break;
          }
          case 16: {
            SizeThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            resizeMethod_ = (global::Tensorflow.Models.ObjectDetection.Protos.ResizeType) input.ReadEnum();
            break;
          }
          case 32: {
            ConvertToGrayscale = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConditionalShapeResizer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Enumeration for the condition on which to resize an image.
      /// </summary>
      public enum ResizeCondition {
        /// <summary>
        /// Default value.
        /// </summary>
        [pbr::OriginalName("INVALID")] Invalid = 0,
        /// <summary>
        /// Resizes image if a dimension is greater than specified size.
        /// </summary>
        [pbr::OriginalName("GREATER")] Greater = 1,
        /// <summary>
        /// Resizes image if a dimension is smaller than specified size.
        /// </summary>
        [pbr::OriginalName("SMALLER")] Smaller = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
