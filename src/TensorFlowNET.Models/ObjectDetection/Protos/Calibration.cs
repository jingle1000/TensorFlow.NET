// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: object_detection/protos/calibration.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Models.ObjectDetection.Protos {

  /// <summary>Holder for reflection information generated from object_detection/protos/calibration.proto</summary>
  public static partial class CalibrationReflection {

    #region Descriptor
    /// <summary>File descriptor for object_detection/protos/calibration.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CalibrationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilvYmplY3RfZGV0ZWN0aW9uL3Byb3Rvcy9jYWxpYnJhdGlvbi5wcm90bxIX",
            "b2JqZWN0X2RldGVjdGlvbi5wcm90b3MigQMKEUNhbGlicmF0aW9uQ29uZmln",
            "ElAKFmZ1bmN0aW9uX2FwcHJveGltYXRpb24YASABKAsyLi5vYmplY3RfZGV0",
            "ZWN0aW9uLnByb3Rvcy5GdW5jdGlvbkFwcHJveGltYXRpb25IABJiCiBjbGFz",
            "c19pZF9mdW5jdGlvbl9hcHByb3hpbWF0aW9ucxgCIAEoCzI2Lm9iamVjdF9k",
            "ZXRlY3Rpb24ucHJvdG9zLkNsYXNzSWRGdW5jdGlvbkFwcHJveGltYXRpb25z",
            "SAASSgoTc2lnbW9pZF9jYWxpYnJhdGlvbhgDIAEoCzIrLm9iamVjdF9kZXRl",
            "Y3Rpb24ucHJvdG9zLlNpZ21vaWRDYWxpYnJhdGlvbkgAElwKHWNsYXNzX2lk",
            "X3NpZ21vaWRfY2FsaWJyYXRpb25zGAQgASgLMjMub2JqZWN0X2RldGVjdGlv",
            "bi5wcm90b3MuQ2xhc3NJZFNpZ21vaWRDYWxpYnJhdGlvbnNIAEIMCgpjYWxp",
            "YnJhdG9yIkwKFUZ1bmN0aW9uQXBwcm94aW1hdGlvbhIzCgl4X3lfcGFpcnMY",
            "ASABKAsyIC5vYmplY3RfZGV0ZWN0aW9uLnByb3Rvcy5YWVBhaXJzIukBCh1D",
            "bGFzc0lkRnVuY3Rpb25BcHByb3hpbWF0aW9ucxJsChVjbGFzc19pZF94eV9w",
            "YWlyc19tYXAYASADKAsyTS5vYmplY3RfZGV0ZWN0aW9uLnByb3Rvcy5DbGFz",
            "c0lkRnVuY3Rpb25BcHByb3hpbWF0aW9ucy5DbGFzc0lkWHlQYWlyc01hcEVu",
            "dHJ5GloKFkNsYXNzSWRYeVBhaXJzTWFwRW50cnkSCwoDa2V5GAEgASgFEi8K",
            "BXZhbHVlGAIgASgLMiAub2JqZWN0X2RldGVjdGlvbi5wcm90b3MuWFlQYWly",
            "czoCOAEiXAoSU2lnbW9pZENhbGlicmF0aW9uEkYKEnNpZ21vaWRfcGFyYW1l",
            "dGVycxgBIAEoCzIqLm9iamVjdF9kZXRlY3Rpb24ucHJvdG9zLlNpZ21vaWRQ",
            "YXJhbWV0ZXJzIosCChpDbGFzc0lkU2lnbW9pZENhbGlicmF0aW9ucxJ9Ch9j",
            "bGFzc19pZF9zaWdtb2lkX3BhcmFtZXRlcnNfbWFwGAEgAygLMlQub2JqZWN0",
            "X2RldGVjdGlvbi5wcm90b3MuQ2xhc3NJZFNpZ21vaWRDYWxpYnJhdGlvbnMu",
            "Q2xhc3NJZFNpZ21vaWRQYXJhbWV0ZXJzTWFwRW50cnkabgogQ2xhc3NJZFNp",
            "Z21vaWRQYXJhbWV0ZXJzTWFwRW50cnkSCwoDa2V5GAEgASgFEjkKBXZhbHVl",
            "GAIgASgLMioub2JqZWN0X2RldGVjdGlvbi5wcm90b3MuU2lnbW9pZFBhcmFt",
            "ZXRlcnM6AjgBIqsBCgdYWVBhaXJzEjkKCHhfeV9wYWlyGAEgAygLMicub2Jq",
            "ZWN0X2RldGVjdGlvbi5wcm90b3MuWFlQYWlycy5YWVBhaXISRQoSdHJhaW5p",
            "bmdfZGF0YV90eXBlGAIgASgOMikub2JqZWN0X2RldGVjdGlvbi5wcm90b3Mu",
            "VHJhaW5pbmdEYXRhVHlwZRoeCgZYWVBhaXISCQoBeBgBIAEoAhIJCgF5GAIg",
            "ASgCIikKEVNpZ21vaWRQYXJhbWV0ZXJzEgkKAWEYASABKAISCQoBYhgCIAEo",
            "AipOChBUcmFpbmluZ0RhdGFUeXBlEhUKEURBVEFfVFlQRV9VTktOT1dOEAAS",
            "DwoLQUxMX0NMQVNTRVMQARISCg5DTEFTU19TUEVDSUZJQxACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tensorflow.Models.ObjectDetection.Protos.TrainingDataType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.CalibrationConfig), global::Tensorflow.Models.ObjectDetection.Protos.CalibrationConfig.Parser, new[]{ "FunctionApproximation", "ClassIdFunctionApproximations", "SigmoidCalibration", "ClassIdSigmoidCalibrations" }, new[]{ "Calibrator" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.FunctionApproximation), global::Tensorflow.Models.ObjectDetection.Protos.FunctionApproximation.Parser, new[]{ "XYPairs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.ClassIdFunctionApproximations), global::Tensorflow.Models.ObjectDetection.Protos.ClassIdFunctionApproximations.Parser, new[]{ "ClassIdXyPairsMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.SigmoidCalibration), global::Tensorflow.Models.ObjectDetection.Protos.SigmoidCalibration.Parser, new[]{ "SigmoidParameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.ClassIdSigmoidCalibrations), global::Tensorflow.Models.ObjectDetection.Protos.ClassIdSigmoidCalibrations.Parser, new[]{ "ClassIdSigmoidParametersMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.XYPairs), global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Parser, new[]{ "XYPair", "TrainingDataType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Types.XYPair), global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Types.XYPair.Parser, new[]{ "X", "Y" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters), global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters.Parser, new[]{ "A", "B" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Description of data used to fit the calibration model. CLASS_SPECIFIC
  /// indicates that the calibration parameters are derived from detections
  /// pertaining to a single class. ALL_CLASSES indicates that parameters were
  /// obtained by fitting a model on detections from all classes (including the
  /// background class).
  /// </summary>
  public enum TrainingDataType {
    [pbr::OriginalName("DATA_TYPE_UNKNOWN")] DataTypeUnknown = 0,
    [pbr::OriginalName("ALL_CLASSES")] AllClasses = 1,
    [pbr::OriginalName("CLASS_SPECIFIC")] ClassSpecific = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Message wrapper for various calibration configurations.
  /// </summary>
  public sealed partial class CalibrationConfig : pb::IMessage<CalibrationConfig> {
    private static readonly pb::MessageParser<CalibrationConfig> _parser = new pb::MessageParser<CalibrationConfig>(() => new CalibrationConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalibrationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.CalibrationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationConfig(CalibrationConfig other) : this() {
      switch (other.CalibratorCase) {
        case CalibratorOneofCase.FunctionApproximation:
          FunctionApproximation = other.FunctionApproximation.Clone();
          break;
        case CalibratorOneofCase.ClassIdFunctionApproximations:
          ClassIdFunctionApproximations = other.ClassIdFunctionApproximations.Clone();
          break;
        case CalibratorOneofCase.SigmoidCalibration:
          SigmoidCalibration = other.SigmoidCalibration.Clone();
          break;
        case CalibratorOneofCase.ClassIdSigmoidCalibrations:
          ClassIdSigmoidCalibrations = other.ClassIdSigmoidCalibrations.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationConfig Clone() {
      return new CalibrationConfig(this);
    }

    /// <summary>Field number for the "function_approximation" field.</summary>
    public const int FunctionApproximationFieldNumber = 1;
    /// <summary>
    /// Class-agnostic calibration via linear interpolation (usually output from
    /// isotonic regression).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.FunctionApproximation FunctionApproximation {
      get { return calibratorCase_ == CalibratorOneofCase.FunctionApproximation ? (global::Tensorflow.Models.ObjectDetection.Protos.FunctionApproximation) calibrator_ : null; }
      set {
        calibrator_ = value;
        calibratorCase_ = value == null ? CalibratorOneofCase.None : CalibratorOneofCase.FunctionApproximation;
      }
    }

    /// <summary>Field number for the "class_id_function_approximations" field.</summary>
    public const int ClassIdFunctionApproximationsFieldNumber = 2;
    /// <summary>
    /// Per-class calibration via linear interpolation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ClassIdFunctionApproximations ClassIdFunctionApproximations {
      get { return calibratorCase_ == CalibratorOneofCase.ClassIdFunctionApproximations ? (global::Tensorflow.Models.ObjectDetection.Protos.ClassIdFunctionApproximations) calibrator_ : null; }
      set {
        calibrator_ = value;
        calibratorCase_ = value == null ? CalibratorOneofCase.None : CalibratorOneofCase.ClassIdFunctionApproximations;
      }
    }

    /// <summary>Field number for the "sigmoid_calibration" field.</summary>
    public const int SigmoidCalibrationFieldNumber = 3;
    /// <summary>
    /// Class-agnostic sigmoid calibration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.SigmoidCalibration SigmoidCalibration {
      get { return calibratorCase_ == CalibratorOneofCase.SigmoidCalibration ? (global::Tensorflow.Models.ObjectDetection.Protos.SigmoidCalibration) calibrator_ : null; }
      set {
        calibrator_ = value;
        calibratorCase_ = value == null ? CalibratorOneofCase.None : CalibratorOneofCase.SigmoidCalibration;
      }
    }

    /// <summary>Field number for the "class_id_sigmoid_calibrations" field.</summary>
    public const int ClassIdSigmoidCalibrationsFieldNumber = 4;
    /// <summary>
    /// Per-class sigmoid calibration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ClassIdSigmoidCalibrations ClassIdSigmoidCalibrations {
      get { return calibratorCase_ == CalibratorOneofCase.ClassIdSigmoidCalibrations ? (global::Tensorflow.Models.ObjectDetection.Protos.ClassIdSigmoidCalibrations) calibrator_ : null; }
      set {
        calibrator_ = value;
        calibratorCase_ = value == null ? CalibratorOneofCase.None : CalibratorOneofCase.ClassIdSigmoidCalibrations;
      }
    }

    private object calibrator_;
    /// <summary>Enum of possible cases for the "calibrator" oneof.</summary>
    public enum CalibratorOneofCase {
      None = 0,
      FunctionApproximation = 1,
      ClassIdFunctionApproximations = 2,
      SigmoidCalibration = 3,
      ClassIdSigmoidCalibrations = 4,
    }
    private CalibratorOneofCase calibratorCase_ = CalibratorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibratorOneofCase CalibratorCase {
      get { return calibratorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCalibrator() {
      calibratorCase_ = CalibratorOneofCase.None;
      calibrator_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalibrationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalibrationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FunctionApproximation, other.FunctionApproximation)) return false;
      if (!object.Equals(ClassIdFunctionApproximations, other.ClassIdFunctionApproximations)) return false;
      if (!object.Equals(SigmoidCalibration, other.SigmoidCalibration)) return false;
      if (!object.Equals(ClassIdSigmoidCalibrations, other.ClassIdSigmoidCalibrations)) return false;
      if (CalibratorCase != other.CalibratorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (calibratorCase_ == CalibratorOneofCase.FunctionApproximation) hash ^= FunctionApproximation.GetHashCode();
      if (calibratorCase_ == CalibratorOneofCase.ClassIdFunctionApproximations) hash ^= ClassIdFunctionApproximations.GetHashCode();
      if (calibratorCase_ == CalibratorOneofCase.SigmoidCalibration) hash ^= SigmoidCalibration.GetHashCode();
      if (calibratorCase_ == CalibratorOneofCase.ClassIdSigmoidCalibrations) hash ^= ClassIdSigmoidCalibrations.GetHashCode();
      hash ^= (int) calibratorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (calibratorCase_ == CalibratorOneofCase.FunctionApproximation) {
        output.WriteRawTag(10);
        output.WriteMessage(FunctionApproximation);
      }
      if (calibratorCase_ == CalibratorOneofCase.ClassIdFunctionApproximations) {
        output.WriteRawTag(18);
        output.WriteMessage(ClassIdFunctionApproximations);
      }
      if (calibratorCase_ == CalibratorOneofCase.SigmoidCalibration) {
        output.WriteRawTag(26);
        output.WriteMessage(SigmoidCalibration);
      }
      if (calibratorCase_ == CalibratorOneofCase.ClassIdSigmoidCalibrations) {
        output.WriteRawTag(34);
        output.WriteMessage(ClassIdSigmoidCalibrations);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (calibratorCase_ == CalibratorOneofCase.FunctionApproximation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionApproximation);
      }
      if (calibratorCase_ == CalibratorOneofCase.ClassIdFunctionApproximations) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassIdFunctionApproximations);
      }
      if (calibratorCase_ == CalibratorOneofCase.SigmoidCalibration) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SigmoidCalibration);
      }
      if (calibratorCase_ == CalibratorOneofCase.ClassIdSigmoidCalibrations) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassIdSigmoidCalibrations);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalibrationConfig other) {
      if (other == null) {
        return;
      }
      switch (other.CalibratorCase) {
        case CalibratorOneofCase.FunctionApproximation:
          if (FunctionApproximation == null) {
            FunctionApproximation = new global::Tensorflow.Models.ObjectDetection.Protos.FunctionApproximation();
          }
          FunctionApproximation.MergeFrom(other.FunctionApproximation);
          break;
        case CalibratorOneofCase.ClassIdFunctionApproximations:
          if (ClassIdFunctionApproximations == null) {
            ClassIdFunctionApproximations = new global::Tensorflow.Models.ObjectDetection.Protos.ClassIdFunctionApproximations();
          }
          ClassIdFunctionApproximations.MergeFrom(other.ClassIdFunctionApproximations);
          break;
        case CalibratorOneofCase.SigmoidCalibration:
          if (SigmoidCalibration == null) {
            SigmoidCalibration = new global::Tensorflow.Models.ObjectDetection.Protos.SigmoidCalibration();
          }
          SigmoidCalibration.MergeFrom(other.SigmoidCalibration);
          break;
        case CalibratorOneofCase.ClassIdSigmoidCalibrations:
          if (ClassIdSigmoidCalibrations == null) {
            ClassIdSigmoidCalibrations = new global::Tensorflow.Models.ObjectDetection.Protos.ClassIdSigmoidCalibrations();
          }
          ClassIdSigmoidCalibrations.MergeFrom(other.ClassIdSigmoidCalibrations);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Tensorflow.Models.ObjectDetection.Protos.FunctionApproximation subBuilder = new global::Tensorflow.Models.ObjectDetection.Protos.FunctionApproximation();
            if (calibratorCase_ == CalibratorOneofCase.FunctionApproximation) {
              subBuilder.MergeFrom(FunctionApproximation);
            }
            input.ReadMessage(subBuilder);
            FunctionApproximation = subBuilder;
            break;
          }
          case 18: {
            global::Tensorflow.Models.ObjectDetection.Protos.ClassIdFunctionApproximations subBuilder = new global::Tensorflow.Models.ObjectDetection.Protos.ClassIdFunctionApproximations();
            if (calibratorCase_ == CalibratorOneofCase.ClassIdFunctionApproximations) {
              subBuilder.MergeFrom(ClassIdFunctionApproximations);
            }
            input.ReadMessage(subBuilder);
            ClassIdFunctionApproximations = subBuilder;
            break;
          }
          case 26: {
            global::Tensorflow.Models.ObjectDetection.Protos.SigmoidCalibration subBuilder = new global::Tensorflow.Models.ObjectDetection.Protos.SigmoidCalibration();
            if (calibratorCase_ == CalibratorOneofCase.SigmoidCalibration) {
              subBuilder.MergeFrom(SigmoidCalibration);
            }
            input.ReadMessage(subBuilder);
            SigmoidCalibration = subBuilder;
            break;
          }
          case 34: {
            global::Tensorflow.Models.ObjectDetection.Protos.ClassIdSigmoidCalibrations subBuilder = new global::Tensorflow.Models.ObjectDetection.Protos.ClassIdSigmoidCalibrations();
            if (calibratorCase_ == CalibratorOneofCase.ClassIdSigmoidCalibrations) {
              subBuilder.MergeFrom(ClassIdSigmoidCalibrations);
            }
            input.ReadMessage(subBuilder);
            ClassIdSigmoidCalibrations = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for class-agnostic domain/range mapping for function
  /// approximations.
  /// </summary>
  public sealed partial class FunctionApproximation : pb::IMessage<FunctionApproximation> {
    private static readonly pb::MessageParser<FunctionApproximation> _parser = new pb::MessageParser<FunctionApproximation>(() => new FunctionApproximation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FunctionApproximation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.CalibrationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionApproximation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionApproximation(FunctionApproximation other) : this() {
      xYPairs_ = other.xYPairs_ != null ? other.xYPairs_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionApproximation Clone() {
      return new FunctionApproximation(this);
    }

    /// <summary>Field number for the "x_y_pairs" field.</summary>
    public const int XYPairsFieldNumber = 1;
    private global::Tensorflow.Models.ObjectDetection.Protos.XYPairs xYPairs_;
    /// <summary>
    /// Message mapping class labels to indices
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.XYPairs XYPairs {
      get { return xYPairs_; }
      set {
        xYPairs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FunctionApproximation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FunctionApproximation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(XYPairs, other.XYPairs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (xYPairs_ != null) hash ^= XYPairs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (xYPairs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(XYPairs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (xYPairs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XYPairs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FunctionApproximation other) {
      if (other == null) {
        return;
      }
      if (other.xYPairs_ != null) {
        if (xYPairs_ == null) {
          xYPairs_ = new global::Tensorflow.Models.ObjectDetection.Protos.XYPairs();
        }
        XYPairs.MergeFrom(other.XYPairs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (xYPairs_ == null) {
              xYPairs_ = new global::Tensorflow.Models.ObjectDetection.Protos.XYPairs();
            }
            input.ReadMessage(xYPairs_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for class-specific domain/range mapping for function
  /// approximations.
  /// </summary>
  public sealed partial class ClassIdFunctionApproximations : pb::IMessage<ClassIdFunctionApproximations> {
    private static readonly pb::MessageParser<ClassIdFunctionApproximations> _parser = new pb::MessageParser<ClassIdFunctionApproximations>(() => new ClassIdFunctionApproximations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassIdFunctionApproximations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.CalibrationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassIdFunctionApproximations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassIdFunctionApproximations(ClassIdFunctionApproximations other) : this() {
      classIdXyPairsMap_ = other.classIdXyPairsMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassIdFunctionApproximations Clone() {
      return new ClassIdFunctionApproximations(this);
    }

    /// <summary>Field number for the "class_id_xy_pairs_map" field.</summary>
    public const int ClassIdXyPairsMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.XYPairs>.Codec _map_classIdXyPairsMap_codec
        = new pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.XYPairs>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Parser), 10);
    private readonly pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.XYPairs> classIdXyPairsMap_ = new pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.XYPairs>();
    /// <summary>
    /// Message mapping class ids to indices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.XYPairs> ClassIdXyPairsMap {
      get { return classIdXyPairsMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassIdFunctionApproximations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassIdFunctionApproximations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ClassIdXyPairsMap.Equals(other.ClassIdXyPairsMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ClassIdXyPairsMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      classIdXyPairsMap_.WriteTo(output, _map_classIdXyPairsMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += classIdXyPairsMap_.CalculateSize(_map_classIdXyPairsMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassIdFunctionApproximations other) {
      if (other == null) {
        return;
      }
      classIdXyPairsMap_.Add(other.classIdXyPairsMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            classIdXyPairsMap_.AddEntriesFrom(input, _map_classIdXyPairsMap_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for class-agnostic Sigmoid Calibration.
  /// </summary>
  public sealed partial class SigmoidCalibration : pb::IMessage<SigmoidCalibration> {
    private static readonly pb::MessageParser<SigmoidCalibration> _parser = new pb::MessageParser<SigmoidCalibration>(() => new SigmoidCalibration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SigmoidCalibration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.CalibrationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidCalibration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidCalibration(SigmoidCalibration other) : this() {
      sigmoidParameters_ = other.sigmoidParameters_ != null ? other.sigmoidParameters_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidCalibration Clone() {
      return new SigmoidCalibration(this);
    }

    /// <summary>Field number for the "sigmoid_parameters" field.</summary>
    public const int SigmoidParametersFieldNumber = 1;
    private global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters sigmoidParameters_;
    /// <summary>
    /// Message mapping class index to Sigmoid Parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters SigmoidParameters {
      get { return sigmoidParameters_; }
      set {
        sigmoidParameters_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SigmoidCalibration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SigmoidCalibration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SigmoidParameters, other.SigmoidParameters)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sigmoidParameters_ != null) hash ^= SigmoidParameters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sigmoidParameters_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SigmoidParameters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sigmoidParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SigmoidParameters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SigmoidCalibration other) {
      if (other == null) {
        return;
      }
      if (other.sigmoidParameters_ != null) {
        if (sigmoidParameters_ == null) {
          sigmoidParameters_ = new global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters();
        }
        SigmoidParameters.MergeFrom(other.SigmoidParameters);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sigmoidParameters_ == null) {
              sigmoidParameters_ = new global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters();
            }
            input.ReadMessage(sigmoidParameters_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for class-specific Sigmoid Calibration.
  /// </summary>
  public sealed partial class ClassIdSigmoidCalibrations : pb::IMessage<ClassIdSigmoidCalibrations> {
    private static readonly pb::MessageParser<ClassIdSigmoidCalibrations> _parser = new pb::MessageParser<ClassIdSigmoidCalibrations>(() => new ClassIdSigmoidCalibrations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassIdSigmoidCalibrations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.CalibrationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassIdSigmoidCalibrations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassIdSigmoidCalibrations(ClassIdSigmoidCalibrations other) : this() {
      classIdSigmoidParametersMap_ = other.classIdSigmoidParametersMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassIdSigmoidCalibrations Clone() {
      return new ClassIdSigmoidCalibrations(this);
    }

    /// <summary>Field number for the "class_id_sigmoid_parameters_map" field.</summary>
    public const int ClassIdSigmoidParametersMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters>.Codec _map_classIdSigmoidParametersMap_codec
        = new pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters.Parser), 10);
    private readonly pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters> classIdSigmoidParametersMap_ = new pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters>();
    /// <summary>
    /// Message mapping class index to Sigmoid Parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Tensorflow.Models.ObjectDetection.Protos.SigmoidParameters> ClassIdSigmoidParametersMap {
      get { return classIdSigmoidParametersMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassIdSigmoidCalibrations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassIdSigmoidCalibrations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ClassIdSigmoidParametersMap.Equals(other.ClassIdSigmoidParametersMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ClassIdSigmoidParametersMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      classIdSigmoidParametersMap_.WriteTo(output, _map_classIdSigmoidParametersMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += classIdSigmoidParametersMap_.CalculateSize(_map_classIdSigmoidParametersMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassIdSigmoidCalibrations other) {
      if (other == null) {
        return;
      }
      classIdSigmoidParametersMap_.Add(other.classIdSigmoidParametersMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            classIdSigmoidParametersMap_.AddEntriesFrom(input, _map_classIdSigmoidParametersMap_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message to store a domain/range pair for function to be approximated.
  /// </summary>
  public sealed partial class XYPairs : pb::IMessage<XYPairs> {
    private static readonly pb::MessageParser<XYPairs> _parser = new pb::MessageParser<XYPairs>(() => new XYPairs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XYPairs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.CalibrationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XYPairs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XYPairs(XYPairs other) : this() {
      xYPair_ = other.xYPair_.Clone();
      trainingDataType_ = other.trainingDataType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XYPairs Clone() {
      return new XYPairs(this);
    }

    /// <summary>Field number for the "x_y_pair" field.</summary>
    public const int XYPairFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Types.XYPair> _repeated_xYPair_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Types.XYPair.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Types.XYPair> xYPair_ = new pbc::RepeatedField<global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Types.XYPair>();
    /// <summary>
    /// Sequence of x/y pairs for function approximation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Types.XYPair> XYPair {
      get { return xYPair_; }
    }

    /// <summary>Field number for the "training_data_type" field.</summary>
    public const int TrainingDataTypeFieldNumber = 2;
    private global::Tensorflow.Models.ObjectDetection.Protos.TrainingDataType trainingDataType_ = 0;
    /// <summary>
    /// Description of data used to fit the calibration model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.TrainingDataType TrainingDataType {
      get { return trainingDataType_; }
      set {
        trainingDataType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XYPairs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XYPairs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!xYPair_.Equals(other.xYPair_)) return false;
      if (TrainingDataType != other.TrainingDataType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= xYPair_.GetHashCode();
      if (TrainingDataType != 0) hash ^= TrainingDataType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      xYPair_.WriteTo(output, _repeated_xYPair_codec);
      if (TrainingDataType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TrainingDataType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += xYPair_.CalculateSize(_repeated_xYPair_codec);
      if (TrainingDataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrainingDataType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XYPairs other) {
      if (other == null) {
        return;
      }
      xYPair_.Add(other.xYPair_);
      if (other.TrainingDataType != 0) {
        TrainingDataType = other.TrainingDataType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            xYPair_.AddEntriesFrom(input, _repeated_xYPair_codec);
            break;
          }
          case 16: {
            trainingDataType_ = (global::Tensorflow.Models.ObjectDetection.Protos.TrainingDataType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the XYPairs message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class XYPair : pb::IMessage<XYPair> {
        private static readonly pb::MessageParser<XYPair> _parser = new pb::MessageParser<XYPair>(() => new XYPair());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<XYPair> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Models.ObjectDetection.Protos.XYPairs.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public XYPair() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public XYPair(XYPair other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public XYPair Clone() {
          return new XYPair(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as XYPair);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(XYPair other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(XYPair other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Message defining parameters for sigmoid calibration.
  /// </summary>
  public sealed partial class SigmoidParameters : pb::IMessage<SigmoidParameters> {
    private static readonly pb::MessageParser<SigmoidParameters> _parser = new pb::MessageParser<SigmoidParameters>(() => new SigmoidParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SigmoidParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.CalibrationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameters(SigmoidParameters other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameters Clone() {
      return new SigmoidParameters(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private float b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SigmoidParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SigmoidParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(A);
      }
      if (B != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SigmoidParameters other) {
      if (other == null) {
        return;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            A = input.ReadFloat();
            break;
          }
          case 21: {
            B = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
