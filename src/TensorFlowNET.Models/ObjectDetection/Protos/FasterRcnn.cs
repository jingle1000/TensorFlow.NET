// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: object_detection/protos/faster_rcnn.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Models.ObjectDetection.Protos {

  /// <summary>Holder for reflection information generated from object_detection/protos/faster_rcnn.proto</summary>
  public static partial class FasterRcnnReflection {

    #region Descriptor
    /// <summary>File descriptor for object_detection/protos/faster_rcnn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FasterRcnnReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilvYmplY3RfZGV0ZWN0aW9uL3Byb3Rvcy9mYXN0ZXJfcmNubi5wcm90bxIX",
            "b2JqZWN0X2RldGVjdGlvbi5wcm90b3MaLm9iamVjdF9kZXRlY3Rpb24vcHJv",
            "dG9zL2FuY2hvcl9nZW5lcmF0b3IucHJvdG8aK29iamVjdF9kZXRlY3Rpb24v",
            "cHJvdG9zL2JveF9wcmVkaWN0b3IucHJvdG8aKW9iamVjdF9kZXRlY3Rpb24v",
            "cHJvdG9zL2h5cGVycGFyYW1zLnByb3RvGitvYmplY3RfZGV0ZWN0aW9uL3By",
            "b3Rvcy9pbWFnZV9yZXNpemVyLnByb3RvGiRvYmplY3RfZGV0ZWN0aW9uL3By",
            "b3Rvcy9sb3NzZXMucHJvdG8aLW9iamVjdF9kZXRlY3Rpb24vcHJvdG9zL3Bv",
            "c3RfcHJvY2Vzc2luZy5wcm90byL5DAoKRmFzdGVyUmNubhIYChBudW1iZXJf",
            "b2Zfc3RhZ2VzGAEgASgFEhMKC251bV9jbGFzc2VzGAMgASgFEjwKDWltYWdl",
            "X3Jlc2l6ZXIYBCABKAsyJS5vYmplY3RfZGV0ZWN0aW9uLnByb3Rvcy5JbWFn",
            "ZVJlc2l6ZXISTgoRZmVhdHVyZV9leHRyYWN0b3IYBSABKAsyMy5vYmplY3Rf",
            "ZGV0ZWN0aW9uLnByb3Rvcy5GYXN0ZXJSY25uRmVhdHVyZUV4dHJhY3RvchJO",
            "ChxmaXJzdF9zdGFnZV9hbmNob3JfZ2VuZXJhdG9yGAYgASgLMigub2JqZWN0",
            "X2RldGVjdGlvbi5wcm90b3MuQW5jaG9yR2VuZXJhdG9yEh8KF2ZpcnN0X3N0",
            "YWdlX2F0cm91c19yYXRlGAcgASgFElgKKmZpcnN0X3N0YWdlX2JveF9wcmVk",
            "aWN0b3JfY29udl9oeXBlcnBhcmFtcxgIIAEoCzIkLm9iamVjdF9kZXRlY3Rp",
            "b24ucHJvdG9zLkh5cGVycGFyYW1zEi0KJWZpcnN0X3N0YWdlX2JveF9wcmVk",
            "aWN0b3Jfa2VybmVsX3NpemUYCSABKAUSJwofZmlyc3Rfc3RhZ2VfYm94X3By",
            "ZWRpY3Rvcl9kZXB0aBgKIAEoBRIiChpmaXJzdF9zdGFnZV9taW5pYmF0Y2hf",
            "c2l6ZRgLIAEoBRItCiVmaXJzdF9zdGFnZV9wb3NpdGl2ZV9iYWxhbmNlX2Zy",
            "YWN0aW9uGAwgASgCEicKH2ZpcnN0X3N0YWdlX25tc19zY29yZV90aHJlc2hv",
            "bGQYDSABKAISJQodZmlyc3Rfc3RhZ2Vfbm1zX2lvdV90aHJlc2hvbGQYDiAB",
            "KAISIQoZZmlyc3Rfc3RhZ2VfbWF4X3Byb3Bvc2FscxgPIAEoBRIsCiRmaXJz",
            "dF9zdGFnZV9sb2NhbGl6YXRpb25fbG9zc193ZWlnaHQYECABKAISKgoiZmly",
            "c3Rfc3RhZ2Vfb2JqZWN0bmVzc19sb3NzX3dlaWdodBgRIAEoAhIZChFpbml0",
            "aWFsX2Nyb3Bfc2l6ZRgSIAEoBRIbChNtYXhwb29sX2tlcm5lbF9zaXplGBMg",
            "ASgFEhYKDm1heHBvb2xfc3RyaWRlGBQgASgFEkkKGnNlY29uZF9zdGFnZV9i",
            "b3hfcHJlZGljdG9yGBUgASgLMiUub2JqZWN0X2RldGVjdGlvbi5wcm90b3Mu",
            "Qm94UHJlZGljdG9yEh8KF3NlY29uZF9zdGFnZV9iYXRjaF9zaXplGBYgASgF",
            "EiUKHXNlY29uZF9zdGFnZV9iYWxhbmNlX2ZyYWN0aW9uGBcgASgCEk0KHHNl",
            "Y29uZF9zdGFnZV9wb3N0X3Byb2Nlc3NpbmcYGCABKAsyJy5vYmplY3RfZGV0",
            "ZWN0aW9uLnByb3Rvcy5Qb3N0UHJvY2Vzc2luZxItCiVzZWNvbmRfc3RhZ2Vf",
            "bG9jYWxpemF0aW9uX2xvc3Nfd2VpZ2h0GBkgASgCEi8KJ3NlY29uZF9zdGFn",
            "ZV9jbGFzc2lmaWNhdGlvbl9sb3NzX3dlaWdodBgaIAEoAhIwCihzZWNvbmRf",
            "c3RhZ2VfbWFza19wcmVkaWN0aW9uX2xvc3Nfd2VpZ2h0GBsgASgCEkUKEmhh",
            "cmRfZXhhbXBsZV9taW5lchgcIAEoCzIpLm9iamVjdF9kZXRlY3Rpb24ucHJv",
            "dG9zLkhhcmRFeGFtcGxlTWluZXISVQogc2Vjb25kX3N0YWdlX2NsYXNzaWZp",
            "Y2F0aW9uX2xvc3MYHSABKAsyKy5vYmplY3RfZGV0ZWN0aW9uLnByb3Rvcy5D",
            "bGFzc2lmaWNhdGlvbkxvc3MSIAoYaW5wbGFjZV9iYXRjaG5vcm1fdXBkYXRl",
            "GB4gASgIEiIKGnVzZV9tYXRtdWxfY3JvcF9hbmRfcmVzaXplGB8gASgIEh0K",
            "FWNsaXBfYW5jaG9yc190b19pbWFnZRggIAEoCBIkChx1c2VfbWF0bXVsX2dh",
            "dGhlcl9pbl9tYXRjaGVyGCEgASgIEikKIXVzZV9zdGF0aWNfYmFsYW5jZWRf",
            "bGFiZWxfc2FtcGxlchgiIAEoCBIZChF1c2Vfc3RhdGljX3NoYXBlcxgjIAEo",
            "CBIUCgxyZXNpemVfbWFza3MYJCABKAgSIgoadXNlX3N0YXRpY19zaGFwZXNf",
            "Zm9yX2V2YWwYJSABKAgibQoaRmFzdGVyUmNubkZlYXR1cmVFeHRyYWN0b3IS",
            "DAoEdHlwZRgBIAEoCRIjChtmaXJzdF9zdGFnZV9mZWF0dXJlc19zdHJpZGUY",
            "AiABKAUSHAoUYmF0Y2hfbm9ybV90cmFpbmFibGUYAyABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.Models.ObjectDetection.Protos.AnchorGeneratorReflection.Descriptor, global::Tensorflow.Models.ObjectDetection.Protos.BoxPredictorReflection.Descriptor, global::Tensorflow.Models.ObjectDetection.Protos.HyperparamsReflection.Descriptor, global::Tensorflow.Models.ObjectDetection.Protos.ImageResizerReflection.Descriptor, global::Tensorflow.Models.ObjectDetection.Protos.LossesReflection.Descriptor, global::Tensorflow.Models.ObjectDetection.Protos.PostProcessingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnn), global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnn.Parser, new[]{ "NumberOfStages", "NumClasses", "ImageResizer", "FeatureExtractor", "FirstStageAnchorGenerator", "FirstStageAtrousRate", "FirstStageBoxPredictorConvHyperparams", "FirstStageBoxPredictorKernelSize", "FirstStageBoxPredictorDepth", "FirstStageMinibatchSize", "FirstStagePositiveBalanceFraction", "FirstStageNmsScoreThreshold", "FirstStageNmsIouThreshold", "FirstStageMaxProposals", "FirstStageLocalizationLossWeight", "FirstStageObjectnessLossWeight", "InitialCropSize", "MaxpoolKernelSize", "MaxpoolStride", "SecondStageBoxPredictor", "SecondStageBatchSize", "SecondStageBalanceFraction", "SecondStagePostProcessing", "SecondStageLocalizationLossWeight", "SecondStageClassificationLossWeight", "SecondStageMaskPredictionLossWeight", "HardExampleMiner", "SecondStageClassificationLoss", "InplaceBatchnormUpdate", "UseMatmulCropAndResize", "ClipAnchorsToImage", "UseMatmulGatherInMatcher", "UseStaticBalancedLabelSampler", "UseStaticShapes", "ResizeMasks", "UseStaticShapesForEval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnnFeatureExtractor), global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnnFeatureExtractor.Parser, new[]{ "Type", "FirstStageFeaturesStride", "BatchNormTrainable" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration for Faster R-CNN models.
  /// See meta_architectures/faster_rcnn_meta_arch.py and models/model_builder.py
  ///
  /// Naming conventions:
  /// Faster R-CNN models have two stages: a first stage region proposal network
  /// (or RPN) and a second stage box classifier.  We thus use the prefixes
  /// `first_stage_` and `second_stage_` to indicate the stage to which each
  /// parameter pertains when relevant.
  /// </summary>
  public sealed partial class FasterRcnn : pb::IMessage<FasterRcnn> {
    private static readonly pb::MessageParser<FasterRcnn> _parser = new pb::MessageParser<FasterRcnn>(() => new FasterRcnn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FasterRcnn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnnReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FasterRcnn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FasterRcnn(FasterRcnn other) : this() {
      numberOfStages_ = other.numberOfStages_;
      numClasses_ = other.numClasses_;
      imageResizer_ = other.imageResizer_ != null ? other.imageResizer_.Clone() : null;
      featureExtractor_ = other.featureExtractor_ != null ? other.featureExtractor_.Clone() : null;
      firstStageAnchorGenerator_ = other.firstStageAnchorGenerator_ != null ? other.firstStageAnchorGenerator_.Clone() : null;
      firstStageAtrousRate_ = other.firstStageAtrousRate_;
      firstStageBoxPredictorConvHyperparams_ = other.firstStageBoxPredictorConvHyperparams_ != null ? other.firstStageBoxPredictorConvHyperparams_.Clone() : null;
      firstStageBoxPredictorKernelSize_ = other.firstStageBoxPredictorKernelSize_;
      firstStageBoxPredictorDepth_ = other.firstStageBoxPredictorDepth_;
      firstStageMinibatchSize_ = other.firstStageMinibatchSize_;
      firstStagePositiveBalanceFraction_ = other.firstStagePositiveBalanceFraction_;
      firstStageNmsScoreThreshold_ = other.firstStageNmsScoreThreshold_;
      firstStageNmsIouThreshold_ = other.firstStageNmsIouThreshold_;
      firstStageMaxProposals_ = other.firstStageMaxProposals_;
      firstStageLocalizationLossWeight_ = other.firstStageLocalizationLossWeight_;
      firstStageObjectnessLossWeight_ = other.firstStageObjectnessLossWeight_;
      initialCropSize_ = other.initialCropSize_;
      maxpoolKernelSize_ = other.maxpoolKernelSize_;
      maxpoolStride_ = other.maxpoolStride_;
      secondStageBoxPredictor_ = other.secondStageBoxPredictor_ != null ? other.secondStageBoxPredictor_.Clone() : null;
      secondStageBatchSize_ = other.secondStageBatchSize_;
      secondStageBalanceFraction_ = other.secondStageBalanceFraction_;
      secondStagePostProcessing_ = other.secondStagePostProcessing_ != null ? other.secondStagePostProcessing_.Clone() : null;
      secondStageLocalizationLossWeight_ = other.secondStageLocalizationLossWeight_;
      secondStageClassificationLossWeight_ = other.secondStageClassificationLossWeight_;
      secondStageMaskPredictionLossWeight_ = other.secondStageMaskPredictionLossWeight_;
      hardExampleMiner_ = other.hardExampleMiner_ != null ? other.hardExampleMiner_.Clone() : null;
      secondStageClassificationLoss_ = other.secondStageClassificationLoss_ != null ? other.secondStageClassificationLoss_.Clone() : null;
      inplaceBatchnormUpdate_ = other.inplaceBatchnormUpdate_;
      useMatmulCropAndResize_ = other.useMatmulCropAndResize_;
      clipAnchorsToImage_ = other.clipAnchorsToImage_;
      useMatmulGatherInMatcher_ = other.useMatmulGatherInMatcher_;
      useStaticBalancedLabelSampler_ = other.useStaticBalancedLabelSampler_;
      useStaticShapes_ = other.useStaticShapes_;
      resizeMasks_ = other.resizeMasks_;
      useStaticShapesForEval_ = other.useStaticShapesForEval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FasterRcnn Clone() {
      return new FasterRcnn(this);
    }

    /// <summary>Field number for the "number_of_stages" field.</summary>
    public const int NumberOfStagesFieldNumber = 1;
    private int numberOfStages_;
    /// <summary>
    /// Whether to construct only the Region Proposal Network (RPN).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfStages {
      get { return numberOfStages_; }
      set {
        numberOfStages_ = value;
      }
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 3;
    private int numClasses_;
    /// <summary>
    /// Number of classes to predict.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumClasses {
      get { return numClasses_; }
      set {
        numClasses_ = value;
      }
    }

    /// <summary>Field number for the "image_resizer" field.</summary>
    public const int ImageResizerFieldNumber = 4;
    private global::Tensorflow.Models.ObjectDetection.Protos.ImageResizer imageResizer_;
    /// <summary>
    /// Image resizer for preprocessing the input image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ImageResizer ImageResizer {
      get { return imageResizer_; }
      set {
        imageResizer_ = value;
      }
    }

    /// <summary>Field number for the "feature_extractor" field.</summary>
    public const int FeatureExtractorFieldNumber = 5;
    private global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnnFeatureExtractor featureExtractor_;
    /// <summary>
    /// Feature extractor config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnnFeatureExtractor FeatureExtractor {
      get { return featureExtractor_; }
      set {
        featureExtractor_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_anchor_generator" field.</summary>
    public const int FirstStageAnchorGeneratorFieldNumber = 6;
    private global::Tensorflow.Models.ObjectDetection.Protos.AnchorGenerator firstStageAnchorGenerator_;
    /// <summary>
    /// Anchor generator to compute RPN anchors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.AnchorGenerator FirstStageAnchorGenerator {
      get { return firstStageAnchorGenerator_; }
      set {
        firstStageAnchorGenerator_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_atrous_rate" field.</summary>
    public const int FirstStageAtrousRateFieldNumber = 7;
    private int firstStageAtrousRate_;
    /// <summary>
    /// Atrous rate for the convolution op applied to the
    /// `first_stage_features_to_crop` tensor to obtain box predictions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstStageAtrousRate {
      get { return firstStageAtrousRate_; }
      set {
        firstStageAtrousRate_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_box_predictor_conv_hyperparams" field.</summary>
    public const int FirstStageBoxPredictorConvHyperparamsFieldNumber = 8;
    private global::Tensorflow.Models.ObjectDetection.Protos.Hyperparams firstStageBoxPredictorConvHyperparams_;
    /// <summary>
    /// Hyperparameters for the convolutional RPN box predictor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.Hyperparams FirstStageBoxPredictorConvHyperparams {
      get { return firstStageBoxPredictorConvHyperparams_; }
      set {
        firstStageBoxPredictorConvHyperparams_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_box_predictor_kernel_size" field.</summary>
    public const int FirstStageBoxPredictorKernelSizeFieldNumber = 9;
    private int firstStageBoxPredictorKernelSize_;
    /// <summary>
    /// Kernel size to use for the convolution op just prior to RPN box
    /// predictions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstStageBoxPredictorKernelSize {
      get { return firstStageBoxPredictorKernelSize_; }
      set {
        firstStageBoxPredictorKernelSize_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_box_predictor_depth" field.</summary>
    public const int FirstStageBoxPredictorDepthFieldNumber = 10;
    private int firstStageBoxPredictorDepth_;
    /// <summary>
    /// Output depth for the convolution op just prior to RPN box predictions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstStageBoxPredictorDepth {
      get { return firstStageBoxPredictorDepth_; }
      set {
        firstStageBoxPredictorDepth_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_minibatch_size" field.</summary>
    public const int FirstStageMinibatchSizeFieldNumber = 11;
    private int firstStageMinibatchSize_;
    /// <summary>
    /// The batch size to use for computing the first stage objectness and
    /// location losses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstStageMinibatchSize {
      get { return firstStageMinibatchSize_; }
      set {
        firstStageMinibatchSize_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_positive_balance_fraction" field.</summary>
    public const int FirstStagePositiveBalanceFractionFieldNumber = 12;
    private float firstStagePositiveBalanceFraction_;
    /// <summary>
    /// Fraction of positive examples per image for the RPN.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirstStagePositiveBalanceFraction {
      get { return firstStagePositiveBalanceFraction_; }
      set {
        firstStagePositiveBalanceFraction_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_nms_score_threshold" field.</summary>
    public const int FirstStageNmsScoreThresholdFieldNumber = 13;
    private float firstStageNmsScoreThreshold_;
    /// <summary>
    /// Non max suppression score threshold applied to first stage RPN proposals.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirstStageNmsScoreThreshold {
      get { return firstStageNmsScoreThreshold_; }
      set {
        firstStageNmsScoreThreshold_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_nms_iou_threshold" field.</summary>
    public const int FirstStageNmsIouThresholdFieldNumber = 14;
    private float firstStageNmsIouThreshold_;
    /// <summary>
    /// Non max suppression IOU threshold applied to first stage RPN proposals.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirstStageNmsIouThreshold {
      get { return firstStageNmsIouThreshold_; }
      set {
        firstStageNmsIouThreshold_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_max_proposals" field.</summary>
    public const int FirstStageMaxProposalsFieldNumber = 15;
    private int firstStageMaxProposals_;
    /// <summary>
    /// Maximum number of RPN proposals retained after first stage postprocessing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstStageMaxProposals {
      get { return firstStageMaxProposals_; }
      set {
        firstStageMaxProposals_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_localization_loss_weight" field.</summary>
    public const int FirstStageLocalizationLossWeightFieldNumber = 16;
    private float firstStageLocalizationLossWeight_;
    /// <summary>
    /// First stage RPN localization loss weight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirstStageLocalizationLossWeight {
      get { return firstStageLocalizationLossWeight_; }
      set {
        firstStageLocalizationLossWeight_ = value;
      }
    }

    /// <summary>Field number for the "first_stage_objectness_loss_weight" field.</summary>
    public const int FirstStageObjectnessLossWeightFieldNumber = 17;
    private float firstStageObjectnessLossWeight_;
    /// <summary>
    /// First stage RPN objectness loss weight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirstStageObjectnessLossWeight {
      get { return firstStageObjectnessLossWeight_; }
      set {
        firstStageObjectnessLossWeight_ = value;
      }
    }

    /// <summary>Field number for the "initial_crop_size" field.</summary>
    public const int InitialCropSizeFieldNumber = 18;
    private int initialCropSize_;
    /// <summary>
    /// Output size (width and height are set to be the same) of the initial
    /// bilinear interpolation based cropping during ROI pooling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitialCropSize {
      get { return initialCropSize_; }
      set {
        initialCropSize_ = value;
      }
    }

    /// <summary>Field number for the "maxpool_kernel_size" field.</summary>
    public const int MaxpoolKernelSizeFieldNumber = 19;
    private int maxpoolKernelSize_;
    /// <summary>
    /// Kernel size of the max pool op on the cropped feature map during
    /// ROI pooling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxpoolKernelSize {
      get { return maxpoolKernelSize_; }
      set {
        maxpoolKernelSize_ = value;
      }
    }

    /// <summary>Field number for the "maxpool_stride" field.</summary>
    public const int MaxpoolStrideFieldNumber = 20;
    private int maxpoolStride_;
    /// <summary>
    /// Stride of the max pool op on the cropped feature map during ROI pooling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxpoolStride {
      get { return maxpoolStride_; }
      set {
        maxpoolStride_ = value;
      }
    }

    /// <summary>Field number for the "second_stage_box_predictor" field.</summary>
    public const int SecondStageBoxPredictorFieldNumber = 21;
    private global::Tensorflow.Models.ObjectDetection.Protos.BoxPredictor secondStageBoxPredictor_;
    /// <summary>
    /// Hyperparameters for the second stage box predictor. If box predictor type
    /// is set to rfcn_box_predictor, a R-FCN model is constructed, otherwise a
    /// Faster R-CNN model is constructed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.BoxPredictor SecondStageBoxPredictor {
      get { return secondStageBoxPredictor_; }
      set {
        secondStageBoxPredictor_ = value;
      }
    }

    /// <summary>Field number for the "second_stage_batch_size" field.</summary>
    public const int SecondStageBatchSizeFieldNumber = 22;
    private int secondStageBatchSize_;
    /// <summary>
    /// The batch size per image used for computing the classification and refined
    /// location loss of the box classifier.
    /// Note that this field is ignored if `hard_example_miner` is configured.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondStageBatchSize {
      get { return secondStageBatchSize_; }
      set {
        secondStageBatchSize_ = value;
      }
    }

    /// <summary>Field number for the "second_stage_balance_fraction" field.</summary>
    public const int SecondStageBalanceFractionFieldNumber = 23;
    private float secondStageBalanceFraction_;
    /// <summary>
    /// Fraction of positive examples to use per image for the box classifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondStageBalanceFraction {
      get { return secondStageBalanceFraction_; }
      set {
        secondStageBalanceFraction_ = value;
      }
    }

    /// <summary>Field number for the "second_stage_post_processing" field.</summary>
    public const int SecondStagePostProcessingFieldNumber = 24;
    private global::Tensorflow.Models.ObjectDetection.Protos.PostProcessing secondStagePostProcessing_;
    /// <summary>
    /// Post processing to apply on the second stage box classifier predictions.
    /// Note: the `score_converter` provided to the FasterRCNNMetaArch constructor
    /// is taken from this `second_stage_post_processing` proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.PostProcessing SecondStagePostProcessing {
      get { return secondStagePostProcessing_; }
      set {
        secondStagePostProcessing_ = value;
      }
    }

    /// <summary>Field number for the "second_stage_localization_loss_weight" field.</summary>
    public const int SecondStageLocalizationLossWeightFieldNumber = 25;
    private float secondStageLocalizationLossWeight_;
    /// <summary>
    /// Second stage refined localization loss weight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondStageLocalizationLossWeight {
      get { return secondStageLocalizationLossWeight_; }
      set {
        secondStageLocalizationLossWeight_ = value;
      }
    }

    /// <summary>Field number for the "second_stage_classification_loss_weight" field.</summary>
    public const int SecondStageClassificationLossWeightFieldNumber = 26;
    private float secondStageClassificationLossWeight_;
    /// <summary>
    /// Second stage classification loss weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondStageClassificationLossWeight {
      get { return secondStageClassificationLossWeight_; }
      set {
        secondStageClassificationLossWeight_ = value;
      }
    }

    /// <summary>Field number for the "second_stage_mask_prediction_loss_weight" field.</summary>
    public const int SecondStageMaskPredictionLossWeightFieldNumber = 27;
    private float secondStageMaskPredictionLossWeight_;
    /// <summary>
    /// Second stage instance mask loss weight. Note that this is only applicable
    /// when `MaskRCNNBoxPredictor` is selected for second stage and configured to
    /// predict instance masks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondStageMaskPredictionLossWeight {
      get { return secondStageMaskPredictionLossWeight_; }
      set {
        secondStageMaskPredictionLossWeight_ = value;
      }
    }

    /// <summary>Field number for the "hard_example_miner" field.</summary>
    public const int HardExampleMinerFieldNumber = 28;
    private global::Tensorflow.Models.ObjectDetection.Protos.HardExampleMiner hardExampleMiner_;
    /// <summary>
    /// If not left to default, applies hard example mining only to classification
    /// and localization loss..
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.HardExampleMiner HardExampleMiner {
      get { return hardExampleMiner_; }
      set {
        hardExampleMiner_ = value;
      }
    }

    /// <summary>Field number for the "second_stage_classification_loss" field.</summary>
    public const int SecondStageClassificationLossFieldNumber = 29;
    private global::Tensorflow.Models.ObjectDetection.Protos.ClassificationLoss secondStageClassificationLoss_;
    /// <summary>
    /// Loss for second stage box classifers, supports Softmax and Sigmoid.
    /// Note that score converter must be consistent with loss type.
    /// When there are multiple labels assigned to the same boxes, recommend
    /// to use sigmoid loss and enable merge_multiple_label_boxes.
    /// If not specified, Softmax loss is used as default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Models.ObjectDetection.Protos.ClassificationLoss SecondStageClassificationLoss {
      get { return secondStageClassificationLoss_; }
      set {
        secondStageClassificationLoss_ = value;
      }
    }

    /// <summary>Field number for the "inplace_batchnorm_update" field.</summary>
    public const int InplaceBatchnormUpdateFieldNumber = 30;
    private bool inplaceBatchnormUpdate_;
    /// <summary>
    /// Whether to update batch_norm inplace during training. This is required
    /// for batch norm to work correctly on TPUs. When this is false, user must add
    /// a control dependency on tf.GraphKeys.UPDATE_OPS for train/loss op in order
    /// to update the batch norm moving average parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InplaceBatchnormUpdate {
      get { return inplaceBatchnormUpdate_; }
      set {
        inplaceBatchnormUpdate_ = value;
      }
    }

    /// <summary>Field number for the "use_matmul_crop_and_resize" field.</summary>
    public const int UseMatmulCropAndResizeFieldNumber = 31;
    private bool useMatmulCropAndResize_;
    /// <summary>
    /// Force the use of matrix multiplication based crop and resize instead of
    /// standard tf.image.crop_and_resize while computing second stage input
    /// feature maps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMatmulCropAndResize {
      get { return useMatmulCropAndResize_; }
      set {
        useMatmulCropAndResize_ = value;
      }
    }

    /// <summary>Field number for the "clip_anchors_to_image" field.</summary>
    public const int ClipAnchorsToImageFieldNumber = 32;
    private bool clipAnchorsToImage_;
    /// <summary>
    /// Normally, anchors generated for a given image size are pruned during
    /// training if they lie outside the image window. Setting this option to true,
    /// clips the anchors to be within the image instead of pruning.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClipAnchorsToImage {
      get { return clipAnchorsToImage_; }
      set {
        clipAnchorsToImage_ = value;
      }
    }

    /// <summary>Field number for the "use_matmul_gather_in_matcher" field.</summary>
    public const int UseMatmulGatherInMatcherFieldNumber = 33;
    private bool useMatmulGatherInMatcher_;
    /// <summary>
    /// After peforming matching between anchors and targets, in order to pull out
    /// targets for training Faster R-CNN meta architecture we perform a gather
    /// operation. This options specifies whether to use an alternate
    /// implementation of tf.gather that is faster on TPUs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMatmulGatherInMatcher {
      get { return useMatmulGatherInMatcher_; }
      set {
        useMatmulGatherInMatcher_ = value;
      }
    }

    /// <summary>Field number for the "use_static_balanced_label_sampler" field.</summary>
    public const int UseStaticBalancedLabelSamplerFieldNumber = 34;
    private bool useStaticBalancedLabelSampler_;
    /// <summary>
    /// Whether to use the balanced positive negative sampler implementation with
    /// static shape guarantees.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseStaticBalancedLabelSampler {
      get { return useStaticBalancedLabelSampler_; }
      set {
        useStaticBalancedLabelSampler_ = value;
      }
    }

    /// <summary>Field number for the "use_static_shapes" field.</summary>
    public const int UseStaticShapesFieldNumber = 35;
    private bool useStaticShapes_;
    /// <summary>
    /// If True, uses implementation of ops with static shape guarantees.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseStaticShapes {
      get { return useStaticShapes_; }
      set {
        useStaticShapes_ = value;
      }
    }

    /// <summary>Field number for the "resize_masks" field.</summary>
    public const int ResizeMasksFieldNumber = 36;
    private bool resizeMasks_;
    /// <summary>
    /// Whether the masks present in groundtruth should be resized in the model to
    /// match the image size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResizeMasks {
      get { return resizeMasks_; }
      set {
        resizeMasks_ = value;
      }
    }

    /// <summary>Field number for the "use_static_shapes_for_eval" field.</summary>
    public const int UseStaticShapesForEvalFieldNumber = 37;
    private bool useStaticShapesForEval_;
    /// <summary>
    /// If True, uses implementation of ops with static shape guarantees when
    /// running evaluation (specifically not is_training if False).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseStaticShapesForEval {
      get { return useStaticShapesForEval_; }
      set {
        useStaticShapesForEval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FasterRcnn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FasterRcnn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfStages != other.NumberOfStages) return false;
      if (NumClasses != other.NumClasses) return false;
      if (!object.Equals(ImageResizer, other.ImageResizer)) return false;
      if (!object.Equals(FeatureExtractor, other.FeatureExtractor)) return false;
      if (!object.Equals(FirstStageAnchorGenerator, other.FirstStageAnchorGenerator)) return false;
      if (FirstStageAtrousRate != other.FirstStageAtrousRate) return false;
      if (!object.Equals(FirstStageBoxPredictorConvHyperparams, other.FirstStageBoxPredictorConvHyperparams)) return false;
      if (FirstStageBoxPredictorKernelSize != other.FirstStageBoxPredictorKernelSize) return false;
      if (FirstStageBoxPredictorDepth != other.FirstStageBoxPredictorDepth) return false;
      if (FirstStageMinibatchSize != other.FirstStageMinibatchSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstStagePositiveBalanceFraction, other.FirstStagePositiveBalanceFraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstStageNmsScoreThreshold, other.FirstStageNmsScoreThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstStageNmsIouThreshold, other.FirstStageNmsIouThreshold)) return false;
      if (FirstStageMaxProposals != other.FirstStageMaxProposals) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstStageLocalizationLossWeight, other.FirstStageLocalizationLossWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstStageObjectnessLossWeight, other.FirstStageObjectnessLossWeight)) return false;
      if (InitialCropSize != other.InitialCropSize) return false;
      if (MaxpoolKernelSize != other.MaxpoolKernelSize) return false;
      if (MaxpoolStride != other.MaxpoolStride) return false;
      if (!object.Equals(SecondStageBoxPredictor, other.SecondStageBoxPredictor)) return false;
      if (SecondStageBatchSize != other.SecondStageBatchSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecondStageBalanceFraction, other.SecondStageBalanceFraction)) return false;
      if (!object.Equals(SecondStagePostProcessing, other.SecondStagePostProcessing)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecondStageLocalizationLossWeight, other.SecondStageLocalizationLossWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecondStageClassificationLossWeight, other.SecondStageClassificationLossWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecondStageMaskPredictionLossWeight, other.SecondStageMaskPredictionLossWeight)) return false;
      if (!object.Equals(HardExampleMiner, other.HardExampleMiner)) return false;
      if (!object.Equals(SecondStageClassificationLoss, other.SecondStageClassificationLoss)) return false;
      if (InplaceBatchnormUpdate != other.InplaceBatchnormUpdate) return false;
      if (UseMatmulCropAndResize != other.UseMatmulCropAndResize) return false;
      if (ClipAnchorsToImage != other.ClipAnchorsToImage) return false;
      if (UseMatmulGatherInMatcher != other.UseMatmulGatherInMatcher) return false;
      if (UseStaticBalancedLabelSampler != other.UseStaticBalancedLabelSampler) return false;
      if (UseStaticShapes != other.UseStaticShapes) return false;
      if (ResizeMasks != other.ResizeMasks) return false;
      if (UseStaticShapesForEval != other.UseStaticShapesForEval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfStages != 0) hash ^= NumberOfStages.GetHashCode();
      if (NumClasses != 0) hash ^= NumClasses.GetHashCode();
      if (imageResizer_ != null) hash ^= ImageResizer.GetHashCode();
      if (featureExtractor_ != null) hash ^= FeatureExtractor.GetHashCode();
      if (firstStageAnchorGenerator_ != null) hash ^= FirstStageAnchorGenerator.GetHashCode();
      if (FirstStageAtrousRate != 0) hash ^= FirstStageAtrousRate.GetHashCode();
      if (firstStageBoxPredictorConvHyperparams_ != null) hash ^= FirstStageBoxPredictorConvHyperparams.GetHashCode();
      if (FirstStageBoxPredictorKernelSize != 0) hash ^= FirstStageBoxPredictorKernelSize.GetHashCode();
      if (FirstStageBoxPredictorDepth != 0) hash ^= FirstStageBoxPredictorDepth.GetHashCode();
      if (FirstStageMinibatchSize != 0) hash ^= FirstStageMinibatchSize.GetHashCode();
      if (FirstStagePositiveBalanceFraction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstStagePositiveBalanceFraction);
      if (FirstStageNmsScoreThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstStageNmsScoreThreshold);
      if (FirstStageNmsIouThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstStageNmsIouThreshold);
      if (FirstStageMaxProposals != 0) hash ^= FirstStageMaxProposals.GetHashCode();
      if (FirstStageLocalizationLossWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstStageLocalizationLossWeight);
      if (FirstStageObjectnessLossWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstStageObjectnessLossWeight);
      if (InitialCropSize != 0) hash ^= InitialCropSize.GetHashCode();
      if (MaxpoolKernelSize != 0) hash ^= MaxpoolKernelSize.GetHashCode();
      if (MaxpoolStride != 0) hash ^= MaxpoolStride.GetHashCode();
      if (secondStageBoxPredictor_ != null) hash ^= SecondStageBoxPredictor.GetHashCode();
      if (SecondStageBatchSize != 0) hash ^= SecondStageBatchSize.GetHashCode();
      if (SecondStageBalanceFraction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecondStageBalanceFraction);
      if (secondStagePostProcessing_ != null) hash ^= SecondStagePostProcessing.GetHashCode();
      if (SecondStageLocalizationLossWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecondStageLocalizationLossWeight);
      if (SecondStageClassificationLossWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecondStageClassificationLossWeight);
      if (SecondStageMaskPredictionLossWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecondStageMaskPredictionLossWeight);
      if (hardExampleMiner_ != null) hash ^= HardExampleMiner.GetHashCode();
      if (secondStageClassificationLoss_ != null) hash ^= SecondStageClassificationLoss.GetHashCode();
      if (InplaceBatchnormUpdate != false) hash ^= InplaceBatchnormUpdate.GetHashCode();
      if (UseMatmulCropAndResize != false) hash ^= UseMatmulCropAndResize.GetHashCode();
      if (ClipAnchorsToImage != false) hash ^= ClipAnchorsToImage.GetHashCode();
      if (UseMatmulGatherInMatcher != false) hash ^= UseMatmulGatherInMatcher.GetHashCode();
      if (UseStaticBalancedLabelSampler != false) hash ^= UseStaticBalancedLabelSampler.GetHashCode();
      if (UseStaticShapes != false) hash ^= UseStaticShapes.GetHashCode();
      if (ResizeMasks != false) hash ^= ResizeMasks.GetHashCode();
      if (UseStaticShapesForEval != false) hash ^= UseStaticShapesForEval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfStages != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumberOfStages);
      }
      if (NumClasses != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumClasses);
      }
      if (imageResizer_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ImageResizer);
      }
      if (featureExtractor_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FeatureExtractor);
      }
      if (firstStageAnchorGenerator_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FirstStageAnchorGenerator);
      }
      if (FirstStageAtrousRate != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FirstStageAtrousRate);
      }
      if (firstStageBoxPredictorConvHyperparams_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FirstStageBoxPredictorConvHyperparams);
      }
      if (FirstStageBoxPredictorKernelSize != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FirstStageBoxPredictorKernelSize);
      }
      if (FirstStageBoxPredictorDepth != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FirstStageBoxPredictorDepth);
      }
      if (FirstStageMinibatchSize != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FirstStageMinibatchSize);
      }
      if (FirstStagePositiveBalanceFraction != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(FirstStagePositiveBalanceFraction);
      }
      if (FirstStageNmsScoreThreshold != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(FirstStageNmsScoreThreshold);
      }
      if (FirstStageNmsIouThreshold != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(FirstStageNmsIouThreshold);
      }
      if (FirstStageMaxProposals != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(FirstStageMaxProposals);
      }
      if (FirstStageLocalizationLossWeight != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(FirstStageLocalizationLossWeight);
      }
      if (FirstStageObjectnessLossWeight != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(FirstStageObjectnessLossWeight);
      }
      if (InitialCropSize != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(InitialCropSize);
      }
      if (MaxpoolKernelSize != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MaxpoolKernelSize);
      }
      if (MaxpoolStride != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MaxpoolStride);
      }
      if (secondStageBoxPredictor_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SecondStageBoxPredictor);
      }
      if (SecondStageBatchSize != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SecondStageBatchSize);
      }
      if (SecondStageBalanceFraction != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(SecondStageBalanceFraction);
      }
      if (secondStagePostProcessing_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(SecondStagePostProcessing);
      }
      if (SecondStageLocalizationLossWeight != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(SecondStageLocalizationLossWeight);
      }
      if (SecondStageClassificationLossWeight != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(SecondStageClassificationLossWeight);
      }
      if (SecondStageMaskPredictionLossWeight != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(SecondStageMaskPredictionLossWeight);
      }
      if (hardExampleMiner_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(HardExampleMiner);
      }
      if (secondStageClassificationLoss_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(SecondStageClassificationLoss);
      }
      if (InplaceBatchnormUpdate != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(InplaceBatchnormUpdate);
      }
      if (UseMatmulCropAndResize != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(UseMatmulCropAndResize);
      }
      if (ClipAnchorsToImage != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ClipAnchorsToImage);
      }
      if (UseMatmulGatherInMatcher != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(UseMatmulGatherInMatcher);
      }
      if (UseStaticBalancedLabelSampler != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(UseStaticBalancedLabelSampler);
      }
      if (UseStaticShapes != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(UseStaticShapes);
      }
      if (ResizeMasks != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(ResizeMasks);
      }
      if (UseStaticShapesForEval != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(UseStaticShapesForEval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumberOfStages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfStages);
      }
      if (NumClasses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumClasses);
      }
      if (imageResizer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageResizer);
      }
      if (featureExtractor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureExtractor);
      }
      if (firstStageAnchorGenerator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstStageAnchorGenerator);
      }
      if (FirstStageAtrousRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstStageAtrousRate);
      }
      if (firstStageBoxPredictorConvHyperparams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstStageBoxPredictorConvHyperparams);
      }
      if (FirstStageBoxPredictorKernelSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstStageBoxPredictorKernelSize);
      }
      if (FirstStageBoxPredictorDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstStageBoxPredictorDepth);
      }
      if (FirstStageMinibatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstStageMinibatchSize);
      }
      if (FirstStagePositiveBalanceFraction != 0F) {
        size += 1 + 4;
      }
      if (FirstStageNmsScoreThreshold != 0F) {
        size += 1 + 4;
      }
      if (FirstStageNmsIouThreshold != 0F) {
        size += 1 + 4;
      }
      if (FirstStageMaxProposals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstStageMaxProposals);
      }
      if (FirstStageLocalizationLossWeight != 0F) {
        size += 2 + 4;
      }
      if (FirstStageObjectnessLossWeight != 0F) {
        size += 2 + 4;
      }
      if (InitialCropSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InitialCropSize);
      }
      if (MaxpoolKernelSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxpoolKernelSize);
      }
      if (MaxpoolStride != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxpoolStride);
      }
      if (secondStageBoxPredictor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecondStageBoxPredictor);
      }
      if (SecondStageBatchSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SecondStageBatchSize);
      }
      if (SecondStageBalanceFraction != 0F) {
        size += 2 + 4;
      }
      if (secondStagePostProcessing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecondStagePostProcessing);
      }
      if (SecondStageLocalizationLossWeight != 0F) {
        size += 2 + 4;
      }
      if (SecondStageClassificationLossWeight != 0F) {
        size += 2 + 4;
      }
      if (SecondStageMaskPredictionLossWeight != 0F) {
        size += 2 + 4;
      }
      if (hardExampleMiner_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HardExampleMiner);
      }
      if (secondStageClassificationLoss_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecondStageClassificationLoss);
      }
      if (InplaceBatchnormUpdate != false) {
        size += 2 + 1;
      }
      if (UseMatmulCropAndResize != false) {
        size += 2 + 1;
      }
      if (ClipAnchorsToImage != false) {
        size += 2 + 1;
      }
      if (UseMatmulGatherInMatcher != false) {
        size += 2 + 1;
      }
      if (UseStaticBalancedLabelSampler != false) {
        size += 2 + 1;
      }
      if (UseStaticShapes != false) {
        size += 2 + 1;
      }
      if (ResizeMasks != false) {
        size += 2 + 1;
      }
      if (UseStaticShapesForEval != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FasterRcnn other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfStages != 0) {
        NumberOfStages = other.NumberOfStages;
      }
      if (other.NumClasses != 0) {
        NumClasses = other.NumClasses;
      }
      if (other.imageResizer_ != null) {
        if (imageResizer_ == null) {
          imageResizer_ = new global::Tensorflow.Models.ObjectDetection.Protos.ImageResizer();
        }
        ImageResizer.MergeFrom(other.ImageResizer);
      }
      if (other.featureExtractor_ != null) {
        if (featureExtractor_ == null) {
          featureExtractor_ = new global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnnFeatureExtractor();
        }
        FeatureExtractor.MergeFrom(other.FeatureExtractor);
      }
      if (other.firstStageAnchorGenerator_ != null) {
        if (firstStageAnchorGenerator_ == null) {
          firstStageAnchorGenerator_ = new global::Tensorflow.Models.ObjectDetection.Protos.AnchorGenerator();
        }
        FirstStageAnchorGenerator.MergeFrom(other.FirstStageAnchorGenerator);
      }
      if (other.FirstStageAtrousRate != 0) {
        FirstStageAtrousRate = other.FirstStageAtrousRate;
      }
      if (other.firstStageBoxPredictorConvHyperparams_ != null) {
        if (firstStageBoxPredictorConvHyperparams_ == null) {
          firstStageBoxPredictorConvHyperparams_ = new global::Tensorflow.Models.ObjectDetection.Protos.Hyperparams();
        }
        FirstStageBoxPredictorConvHyperparams.MergeFrom(other.FirstStageBoxPredictorConvHyperparams);
      }
      if (other.FirstStageBoxPredictorKernelSize != 0) {
        FirstStageBoxPredictorKernelSize = other.FirstStageBoxPredictorKernelSize;
      }
      if (other.FirstStageBoxPredictorDepth != 0) {
        FirstStageBoxPredictorDepth = other.FirstStageBoxPredictorDepth;
      }
      if (other.FirstStageMinibatchSize != 0) {
        FirstStageMinibatchSize = other.FirstStageMinibatchSize;
      }
      if (other.FirstStagePositiveBalanceFraction != 0F) {
        FirstStagePositiveBalanceFraction = other.FirstStagePositiveBalanceFraction;
      }
      if (other.FirstStageNmsScoreThreshold != 0F) {
        FirstStageNmsScoreThreshold = other.FirstStageNmsScoreThreshold;
      }
      if (other.FirstStageNmsIouThreshold != 0F) {
        FirstStageNmsIouThreshold = other.FirstStageNmsIouThreshold;
      }
      if (other.FirstStageMaxProposals != 0) {
        FirstStageMaxProposals = other.FirstStageMaxProposals;
      }
      if (other.FirstStageLocalizationLossWeight != 0F) {
        FirstStageLocalizationLossWeight = other.FirstStageLocalizationLossWeight;
      }
      if (other.FirstStageObjectnessLossWeight != 0F) {
        FirstStageObjectnessLossWeight = other.FirstStageObjectnessLossWeight;
      }
      if (other.InitialCropSize != 0) {
        InitialCropSize = other.InitialCropSize;
      }
      if (other.MaxpoolKernelSize != 0) {
        MaxpoolKernelSize = other.MaxpoolKernelSize;
      }
      if (other.MaxpoolStride != 0) {
        MaxpoolStride = other.MaxpoolStride;
      }
      if (other.secondStageBoxPredictor_ != null) {
        if (secondStageBoxPredictor_ == null) {
          secondStageBoxPredictor_ = new global::Tensorflow.Models.ObjectDetection.Protos.BoxPredictor();
        }
        SecondStageBoxPredictor.MergeFrom(other.SecondStageBoxPredictor);
      }
      if (other.SecondStageBatchSize != 0) {
        SecondStageBatchSize = other.SecondStageBatchSize;
      }
      if (other.SecondStageBalanceFraction != 0F) {
        SecondStageBalanceFraction = other.SecondStageBalanceFraction;
      }
      if (other.secondStagePostProcessing_ != null) {
        if (secondStagePostProcessing_ == null) {
          secondStagePostProcessing_ = new global::Tensorflow.Models.ObjectDetection.Protos.PostProcessing();
        }
        SecondStagePostProcessing.MergeFrom(other.SecondStagePostProcessing);
      }
      if (other.SecondStageLocalizationLossWeight != 0F) {
        SecondStageLocalizationLossWeight = other.SecondStageLocalizationLossWeight;
      }
      if (other.SecondStageClassificationLossWeight != 0F) {
        SecondStageClassificationLossWeight = other.SecondStageClassificationLossWeight;
      }
      if (other.SecondStageMaskPredictionLossWeight != 0F) {
        SecondStageMaskPredictionLossWeight = other.SecondStageMaskPredictionLossWeight;
      }
      if (other.hardExampleMiner_ != null) {
        if (hardExampleMiner_ == null) {
          hardExampleMiner_ = new global::Tensorflow.Models.ObjectDetection.Protos.HardExampleMiner();
        }
        HardExampleMiner.MergeFrom(other.HardExampleMiner);
      }
      if (other.secondStageClassificationLoss_ != null) {
        if (secondStageClassificationLoss_ == null) {
          secondStageClassificationLoss_ = new global::Tensorflow.Models.ObjectDetection.Protos.ClassificationLoss();
        }
        SecondStageClassificationLoss.MergeFrom(other.SecondStageClassificationLoss);
      }
      if (other.InplaceBatchnormUpdate != false) {
        InplaceBatchnormUpdate = other.InplaceBatchnormUpdate;
      }
      if (other.UseMatmulCropAndResize != false) {
        UseMatmulCropAndResize = other.UseMatmulCropAndResize;
      }
      if (other.ClipAnchorsToImage != false) {
        ClipAnchorsToImage = other.ClipAnchorsToImage;
      }
      if (other.UseMatmulGatherInMatcher != false) {
        UseMatmulGatherInMatcher = other.UseMatmulGatherInMatcher;
      }
      if (other.UseStaticBalancedLabelSampler != false) {
        UseStaticBalancedLabelSampler = other.UseStaticBalancedLabelSampler;
      }
      if (other.UseStaticShapes != false) {
        UseStaticShapes = other.UseStaticShapes;
      }
      if (other.ResizeMasks != false) {
        ResizeMasks = other.ResizeMasks;
      }
      if (other.UseStaticShapesForEval != false) {
        UseStaticShapesForEval = other.UseStaticShapesForEval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumberOfStages = input.ReadInt32();
            break;
          }
          case 24: {
            NumClasses = input.ReadInt32();
            break;
          }
          case 34: {
            if (imageResizer_ == null) {
              imageResizer_ = new global::Tensorflow.Models.ObjectDetection.Protos.ImageResizer();
            }
            input.ReadMessage(imageResizer_);
            break;
          }
          case 42: {
            if (featureExtractor_ == null) {
              featureExtractor_ = new global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnnFeatureExtractor();
            }
            input.ReadMessage(featureExtractor_);
            break;
          }
          case 50: {
            if (firstStageAnchorGenerator_ == null) {
              firstStageAnchorGenerator_ = new global::Tensorflow.Models.ObjectDetection.Protos.AnchorGenerator();
            }
            input.ReadMessage(firstStageAnchorGenerator_);
            break;
          }
          case 56: {
            FirstStageAtrousRate = input.ReadInt32();
            break;
          }
          case 66: {
            if (firstStageBoxPredictorConvHyperparams_ == null) {
              firstStageBoxPredictorConvHyperparams_ = new global::Tensorflow.Models.ObjectDetection.Protos.Hyperparams();
            }
            input.ReadMessage(firstStageBoxPredictorConvHyperparams_);
            break;
          }
          case 72: {
            FirstStageBoxPredictorKernelSize = input.ReadInt32();
            break;
          }
          case 80: {
            FirstStageBoxPredictorDepth = input.ReadInt32();
            break;
          }
          case 88: {
            FirstStageMinibatchSize = input.ReadInt32();
            break;
          }
          case 101: {
            FirstStagePositiveBalanceFraction = input.ReadFloat();
            break;
          }
          case 109: {
            FirstStageNmsScoreThreshold = input.ReadFloat();
            break;
          }
          case 117: {
            FirstStageNmsIouThreshold = input.ReadFloat();
            break;
          }
          case 120: {
            FirstStageMaxProposals = input.ReadInt32();
            break;
          }
          case 133: {
            FirstStageLocalizationLossWeight = input.ReadFloat();
            break;
          }
          case 141: {
            FirstStageObjectnessLossWeight = input.ReadFloat();
            break;
          }
          case 144: {
            InitialCropSize = input.ReadInt32();
            break;
          }
          case 152: {
            MaxpoolKernelSize = input.ReadInt32();
            break;
          }
          case 160: {
            MaxpoolStride = input.ReadInt32();
            break;
          }
          case 170: {
            if (secondStageBoxPredictor_ == null) {
              secondStageBoxPredictor_ = new global::Tensorflow.Models.ObjectDetection.Protos.BoxPredictor();
            }
            input.ReadMessage(secondStageBoxPredictor_);
            break;
          }
          case 176: {
            SecondStageBatchSize = input.ReadInt32();
            break;
          }
          case 189: {
            SecondStageBalanceFraction = input.ReadFloat();
            break;
          }
          case 194: {
            if (secondStagePostProcessing_ == null) {
              secondStagePostProcessing_ = new global::Tensorflow.Models.ObjectDetection.Protos.PostProcessing();
            }
            input.ReadMessage(secondStagePostProcessing_);
            break;
          }
          case 205: {
            SecondStageLocalizationLossWeight = input.ReadFloat();
            break;
          }
          case 213: {
            SecondStageClassificationLossWeight = input.ReadFloat();
            break;
          }
          case 221: {
            SecondStageMaskPredictionLossWeight = input.ReadFloat();
            break;
          }
          case 226: {
            if (hardExampleMiner_ == null) {
              hardExampleMiner_ = new global::Tensorflow.Models.ObjectDetection.Protos.HardExampleMiner();
            }
            input.ReadMessage(hardExampleMiner_);
            break;
          }
          case 234: {
            if (secondStageClassificationLoss_ == null) {
              secondStageClassificationLoss_ = new global::Tensorflow.Models.ObjectDetection.Protos.ClassificationLoss();
            }
            input.ReadMessage(secondStageClassificationLoss_);
            break;
          }
          case 240: {
            InplaceBatchnormUpdate = input.ReadBool();
            break;
          }
          case 248: {
            UseMatmulCropAndResize = input.ReadBool();
            break;
          }
          case 256: {
            ClipAnchorsToImage = input.ReadBool();
            break;
          }
          case 264: {
            UseMatmulGatherInMatcher = input.ReadBool();
            break;
          }
          case 272: {
            UseStaticBalancedLabelSampler = input.ReadBool();
            break;
          }
          case 280: {
            UseStaticShapes = input.ReadBool();
            break;
          }
          case 288: {
            ResizeMasks = input.ReadBool();
            break;
          }
          case 296: {
            UseStaticShapesForEval = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FasterRcnnFeatureExtractor : pb::IMessage<FasterRcnnFeatureExtractor> {
    private static readonly pb::MessageParser<FasterRcnnFeatureExtractor> _parser = new pb::MessageParser<FasterRcnnFeatureExtractor>(() => new FasterRcnnFeatureExtractor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FasterRcnnFeatureExtractor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Models.ObjectDetection.Protos.FasterRcnnReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FasterRcnnFeatureExtractor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FasterRcnnFeatureExtractor(FasterRcnnFeatureExtractor other) : this() {
      type_ = other.type_;
      firstStageFeaturesStride_ = other.firstStageFeaturesStride_;
      batchNormTrainable_ = other.batchNormTrainable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FasterRcnnFeatureExtractor Clone() {
      return new FasterRcnnFeatureExtractor(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// Type of Faster R-CNN model (e.g., 'faster_rcnn_resnet101';
    /// See builders/model_builder.py for expected types).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_stage_features_stride" field.</summary>
    public const int FirstStageFeaturesStrideFieldNumber = 2;
    private int firstStageFeaturesStride_;
    /// <summary>
    /// Output stride of extracted RPN feature map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstStageFeaturesStride {
      get { return firstStageFeaturesStride_; }
      set {
        firstStageFeaturesStride_ = value;
      }
    }

    /// <summary>Field number for the "batch_norm_trainable" field.</summary>
    public const int BatchNormTrainableFieldNumber = 3;
    private bool batchNormTrainable_;
    /// <summary>
    /// Whether to update batch norm parameters during training or not.
    /// When training with a relative large batch size (e.g. 8), it could be
    /// desirable to enable batch norm update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BatchNormTrainable {
      get { return batchNormTrainable_; }
      set {
        batchNormTrainable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FasterRcnnFeatureExtractor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FasterRcnnFeatureExtractor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (FirstStageFeaturesStride != other.FirstStageFeaturesStride) return false;
      if (BatchNormTrainable != other.BatchNormTrainable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (FirstStageFeaturesStride != 0) hash ^= FirstStageFeaturesStride.GetHashCode();
      if (BatchNormTrainable != false) hash ^= BatchNormTrainable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (FirstStageFeaturesStride != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FirstStageFeaturesStride);
      }
      if (BatchNormTrainable != false) {
        output.WriteRawTag(24);
        output.WriteBool(BatchNormTrainable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (FirstStageFeaturesStride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstStageFeaturesStride);
      }
      if (BatchNormTrainable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FasterRcnnFeatureExtractor other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.FirstStageFeaturesStride != 0) {
        FirstStageFeaturesStride = other.FirstStageFeaturesStride;
      }
      if (other.BatchNormTrainable != false) {
        BatchNormTrainable = other.BatchNormTrainable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            FirstStageFeaturesStride = input.ReadInt32();
            break;
          }
          case 24: {
            BatchNormTrainable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
